// this is a generated file, DO NOT EDIT

// IMGUI_VERSION: "1.89.5 WIP"
// IMGUI_VERSION_NUM: 18946

/*
state.SetField( -1, "Key_None", ImGuiKey_None );
state.SetField( -1, "Key_Tab", ImGuiKey_Tab );
state.SetField( -1, "Key_LeftArrow", ImGuiKey_LeftArrow );
state.SetField( -1, "Key_RightArrow", ImGuiKey_RightArrow );
state.SetField( -1, "Key_UpArrow", ImGuiKey_UpArrow );
state.SetField( -1, "Key_DownArrow", ImGuiKey_DownArrow );
state.SetField( -1, "Key_PageUp", ImGuiKey_PageUp );
state.SetField( -1, "Key_PageDown", ImGuiKey_PageDown );
state.SetField( -1, "Key_Home", ImGuiKey_Home );
state.SetField( -1, "Key_End", ImGuiKey_End );
state.SetField( -1, "Key_Insert", ImGuiKey_Insert );
state.SetField( -1, "Key_Delete", ImGuiKey_Delete );
state.SetField( -1, "Key_Backspace", ImGuiKey_Backspace );
state.SetField( -1, "Key_Space", ImGuiKey_Space );
state.SetField( -1, "Key_Enter", ImGuiKey_Enter );
state.SetField( -1, "Key_Escape", ImGuiKey_Escape );
state.SetField( -1, "Key_LeftCtrl", ImGuiKey_LeftCtrl );
state.SetField( -1, "Key_LeftShift", ImGuiKey_LeftShift );
state.SetField( -1, "Key_LeftAlt", ImGuiKey_LeftAlt );
state.SetField( -1, "Key_LeftSuper", ImGuiKey_LeftSuper );
state.SetField( -1, "Key_RightCtrl", ImGuiKey_RightCtrl );
state.SetField( -1, "Key_RightShift", ImGuiKey_RightShift );
state.SetField( -1, "Key_RightAlt", ImGuiKey_RightAlt );
state.SetField( -1, "Key_RightSuper", ImGuiKey_RightSuper );
state.SetField( -1, "Key_Menu", ImGuiKey_Menu );
state.SetField( -1, "Key_0", ImGuiKey_0 );
state.SetField( -1, "Key_1", ImGuiKey_1 );
state.SetField( -1, "Key_2", ImGuiKey_2 );
state.SetField( -1, "Key_3", ImGuiKey_3 );
state.SetField( -1, "Key_4", ImGuiKey_4 );
state.SetField( -1, "Key_5", ImGuiKey_5 );
state.SetField( -1, "Key_6", ImGuiKey_6 );
state.SetField( -1, "Key_7", ImGuiKey_7 );
state.SetField( -1, "Key_8", ImGuiKey_8 );
state.SetField( -1, "Key_9", ImGuiKey_9 );
state.SetField( -1, "Key_A", ImGuiKey_A );
state.SetField( -1, "Key_B", ImGuiKey_B );
state.SetField( -1, "Key_C", ImGuiKey_C );
state.SetField( -1, "Key_D", ImGuiKey_D );
state.SetField( -1, "Key_E", ImGuiKey_E );
state.SetField( -1, "Key_F", ImGuiKey_F );
state.SetField( -1, "Key_G", ImGuiKey_G );
state.SetField( -1, "Key_H", ImGuiKey_H );
state.SetField( -1, "Key_I", ImGuiKey_I );
state.SetField( -1, "Key_J", ImGuiKey_J );
state.SetField( -1, "Key_K", ImGuiKey_K );
state.SetField( -1, "Key_L", ImGuiKey_L );
state.SetField( -1, "Key_M", ImGuiKey_M );
state.SetField( -1, "Key_N", ImGuiKey_N );
state.SetField( -1, "Key_O", ImGuiKey_O );
state.SetField( -1, "Key_P", ImGuiKey_P );
state.SetField( -1, "Key_Q", ImGuiKey_Q );
state.SetField( -1, "Key_R", ImGuiKey_R );
state.SetField( -1, "Key_S", ImGuiKey_S );
state.SetField( -1, "Key_T", ImGuiKey_T );
state.SetField( -1, "Key_U", ImGuiKey_U );
state.SetField( -1, "Key_V", ImGuiKey_V );
state.SetField( -1, "Key_W", ImGuiKey_W );
state.SetField( -1, "Key_X", ImGuiKey_X );
state.SetField( -1, "Key_Y", ImGuiKey_Y );
state.SetField( -1, "Key_Z", ImGuiKey_Z );
state.SetField( -1, "Key_F1", ImGuiKey_F1 );
state.SetField( -1, "Key_F2", ImGuiKey_F2 );
state.SetField( -1, "Key_F3", ImGuiKey_F3 );
state.SetField( -1, "Key_F4", ImGuiKey_F4 );
state.SetField( -1, "Key_F5", ImGuiKey_F5 );
state.SetField( -1, "Key_F6", ImGuiKey_F6 );
state.SetField( -1, "Key_F7", ImGuiKey_F7 );
state.SetField( -1, "Key_F8", ImGuiKey_F8 );
state.SetField( -1, "Key_F9", ImGuiKey_F9 );
state.SetField( -1, "Key_F10", ImGuiKey_F10 );
state.SetField( -1, "Key_F11", ImGuiKey_F11 );
state.SetField( -1, "Key_F12", ImGuiKey_F12 );
state.SetField( -1, "Key_Apostrophe", ImGuiKey_Apostrophe );
state.SetField( -1, "Key_Comma", ImGuiKey_Comma );
state.SetField( -1, "Key_Minus", ImGuiKey_Minus );
state.SetField( -1, "Key_Period", ImGuiKey_Period );
state.SetField( -1, "Key_Slash", ImGuiKey_Slash );
state.SetField( -1, "Key_Semicolon", ImGuiKey_Semicolon );
state.SetField( -1, "Key_Equal", ImGuiKey_Equal );
state.SetField( -1, "Key_LeftBracket", ImGuiKey_LeftBracket );
state.SetField( -1, "Key_Backslash", ImGuiKey_Backslash );
state.SetField( -1, "Key_RightBracket", ImGuiKey_RightBracket );
state.SetField( -1, "Key_GraveAccent", ImGuiKey_GraveAccent );
state.SetField( -1, "Key_CapsLock", ImGuiKey_CapsLock );
state.SetField( -1, "Key_ScrollLock", ImGuiKey_ScrollLock );
state.SetField( -1, "Key_NumLock", ImGuiKey_NumLock );
state.SetField( -1, "Key_PrintScreen", ImGuiKey_PrintScreen );
state.SetField( -1, "Key_Pause", ImGuiKey_Pause );
state.SetField( -1, "Key_Keypad0", ImGuiKey_Keypad0 );
state.SetField( -1, "Key_Keypad1", ImGuiKey_Keypad1 );
state.SetField( -1, "Key_Keypad2", ImGuiKey_Keypad2 );
state.SetField( -1, "Key_Keypad3", ImGuiKey_Keypad3 );
state.SetField( -1, "Key_Keypad4", ImGuiKey_Keypad4 );
state.SetField( -1, "Key_Keypad5", ImGuiKey_Keypad5 );
state.SetField( -1, "Key_Keypad6", ImGuiKey_Keypad6 );
state.SetField( -1, "Key_Keypad7", ImGuiKey_Keypad7 );
state.SetField( -1, "Key_Keypad8", ImGuiKey_Keypad8 );
state.SetField( -1, "Key_Keypad9", ImGuiKey_Keypad9 );
state.SetField( -1, "Key_KeypadDecimal", ImGuiKey_KeypadDecimal );
state.SetField( -1, "Key_KeypadDivide", ImGuiKey_KeypadDivide );
state.SetField( -1, "Key_KeypadMultiply", ImGuiKey_KeypadMultiply );
state.SetField( -1, "Key_KeypadSubtract", ImGuiKey_KeypadSubtract );
state.SetField( -1, "Key_KeypadAdd", ImGuiKey_KeypadAdd );
state.SetField( -1, "Key_KeypadEnter", ImGuiKey_KeypadEnter );
state.SetField( -1, "Key_KeypadEqual", ImGuiKey_KeypadEqual );
state.SetField( -1, "Key_GamepadStart", ImGuiKey_GamepadStart );
state.SetField( -1, "Key_GamepadBack", ImGuiKey_GamepadBack );
state.SetField( -1, "Key_GamepadFaceLeft", ImGuiKey_GamepadFaceLeft );
state.SetField( -1, "Key_GamepadFaceRight", ImGuiKey_GamepadFaceRight );
state.SetField( -1, "Key_GamepadFaceUp", ImGuiKey_GamepadFaceUp );
state.SetField( -1, "Key_GamepadFaceDown", ImGuiKey_GamepadFaceDown );
state.SetField( -1, "Key_GamepadDpadLeft", ImGuiKey_GamepadDpadLeft );
state.SetField( -1, "Key_GamepadDpadRight", ImGuiKey_GamepadDpadRight );
state.SetField( -1, "Key_GamepadDpadUp", ImGuiKey_GamepadDpadUp );
state.SetField( -1, "Key_GamepadDpadDown", ImGuiKey_GamepadDpadDown );
state.SetField( -1, "Key_GamepadL1", ImGuiKey_GamepadL1 );
state.SetField( -1, "Key_GamepadR1", ImGuiKey_GamepadR1 );
state.SetField( -1, "Key_GamepadL2", ImGuiKey_GamepadL2 );
state.SetField( -1, "Key_GamepadR2", ImGuiKey_GamepadR2 );
state.SetField( -1, "Key_GamepadL3", ImGuiKey_GamepadL3 );
state.SetField( -1, "Key_GamepadR3", ImGuiKey_GamepadR3 );
state.SetField( -1, "Key_GamepadLStickLeft", ImGuiKey_GamepadLStickLeft );
state.SetField( -1, "Key_GamepadLStickRight", ImGuiKey_GamepadLStickRight );
state.SetField( -1, "Key_GamepadLStickUp", ImGuiKey_GamepadLStickUp );
state.SetField( -1, "Key_GamepadLStickDown", ImGuiKey_GamepadLStickDown );
state.SetField( -1, "Key_GamepadRStickLeft", ImGuiKey_GamepadRStickLeft );
state.SetField( -1, "Key_GamepadRStickRight", ImGuiKey_GamepadRStickRight );
state.SetField( -1, "Key_GamepadRStickUp", ImGuiKey_GamepadRStickUp );
state.SetField( -1, "Key_GamepadRStickDown", ImGuiKey_GamepadRStickDown );
state.SetField( -1, "Key_MouseLeft", ImGuiKey_MouseLeft );
state.SetField( -1, "Key_MouseRight", ImGuiKey_MouseRight );
state.SetField( -1, "Key_MouseMiddle", ImGuiKey_MouseMiddle );
state.SetField( -1, "Key_MouseX1", ImGuiKey_MouseX1 );
state.SetField( -1, "Key_MouseX2", ImGuiKey_MouseX2 );
state.SetField( -1, "Key_MouseWheelX", ImGuiKey_MouseWheelX );
state.SetField( -1, "Key_MouseWheelY", ImGuiKey_MouseWheelY );
state.SetField( -1, "Key_ReservedForModCtrl", ImGuiKey_ReservedForModCtrl );
state.SetField( -1, "Key_ReservedForModShift", ImGuiKey_ReservedForModShift );
state.SetField( -1, "Key_ReservedForModAlt", ImGuiKey_ReservedForModAlt );
state.SetField( -1, "Key_ReservedForModSuper", ImGuiKey_ReservedForModSuper );
state.SetField( -1, "Key_COUNT", ImGuiKey_COUNT );
state.SetField( -1, "Mod_None", ImGuiMod_None );
state.SetField( -1, "Mod_Ctrl", ImGuiMod_Ctrl );
state.SetField( -1, "Mod_Shift", ImGuiMod_Shift );
state.SetField( -1, "Mod_Alt", ImGuiMod_Alt );
state.SetField( -1, "Mod_Super", ImGuiMod_Super );
state.SetField( -1, "Mod_Shortcut", ImGuiMod_Shortcut );
state.SetField( -1, "Mod_Mask_", ImGuiMod_Mask_ );
state.SetField( -1, "Key_NamedKey_BEGIN", ImGuiKey_NamedKey_BEGIN );
state.SetField( -1, "Key_NamedKey_END", ImGuiKey_NamedKey_END );
state.SetField( -1, "Key_NamedKey_COUNT", ImGuiKey_NamedKey_COUNT );
state.SetField( -1, "Key_KeysData_SIZE", ImGuiKey_KeysData_SIZE );
state.SetField( -1, "Key_KeysData_OFFSET", ImGuiKey_KeysData_OFFSET );
state.SetField( -1, "Key_ModCtrl", ImGuiKey_ModCtrl );
state.SetField( -1, "Key_ModShift", ImGuiKey_ModShift );
state.SetField( -1, "Key_ModAlt", ImGuiKey_ModAlt );
state.SetField( -1, "Key_ModSuper", ImGuiKey_ModSuper );
state.SetField( -1, "Key_KeyPadEnter", ImGuiKey_KeyPadEnter );
state.SetField( -1, "WindowFlags_None", ImGuiWindowFlags_None );
state.SetField( -1, "WindowFlags_NoTitleBar", ImGuiWindowFlags_NoTitleBar );
state.SetField( -1, "WindowFlags_NoResize", ImGuiWindowFlags_NoResize );
state.SetField( -1, "WindowFlags_NoMove", ImGuiWindowFlags_NoMove );
state.SetField( -1, "WindowFlags_NoScrollbar", ImGuiWindowFlags_NoScrollbar );
state.SetField( -1, "WindowFlags_NoScrollWithMouse", ImGuiWindowFlags_NoScrollWithMouse );
state.SetField( -1, "WindowFlags_NoCollapse", ImGuiWindowFlags_NoCollapse );
state.SetField( -1, "WindowFlags_AlwaysAutoResize", ImGuiWindowFlags_AlwaysAutoResize );
state.SetField( -1, "WindowFlags_NoBackground", ImGuiWindowFlags_NoBackground );
state.SetField( -1, "WindowFlags_NoSavedSettings", ImGuiWindowFlags_NoSavedSettings );
state.SetField( -1, "WindowFlags_NoMouseInputs", ImGuiWindowFlags_NoMouseInputs );
state.SetField( -1, "WindowFlags_MenuBar", ImGuiWindowFlags_MenuBar );
state.SetField( -1, "WindowFlags_HorizontalScrollbar", ImGuiWindowFlags_HorizontalScrollbar );
state.SetField( -1, "WindowFlags_NoFocusOnAppearing", ImGuiWindowFlags_NoFocusOnAppearing );
state.SetField( -1, "WindowFlags_NoBringToFrontOnFocus", ImGuiWindowFlags_NoBringToFrontOnFocus );
state.SetField( -1, "WindowFlags_AlwaysVerticalScrollbar", ImGuiWindowFlags_AlwaysVerticalScrollbar );
state.SetField( -1, "WindowFlags_AlwaysHorizontalScrollbar", ImGuiWindowFlags_AlwaysHorizontalScrollbar );
state.SetField( -1, "WindowFlags_AlwaysUseWindowPadding", ImGuiWindowFlags_AlwaysUseWindowPadding );
state.SetField( -1, "WindowFlags_NoNavInputs", ImGuiWindowFlags_NoNavInputs );
state.SetField( -1, "WindowFlags_NoNavFocus", ImGuiWindowFlags_NoNavFocus );
state.SetField( -1, "WindowFlags_UnsavedDocument", ImGuiWindowFlags_UnsavedDocument );
state.SetField( -1, "WindowFlags_NoDocking", ImGuiWindowFlags_NoDocking );
state.SetField( -1, "WindowFlags_NoNav", ImGuiWindowFlags_NoNav );
state.SetField( -1, "WindowFlags_NoDecoration", ImGuiWindowFlags_NoDecoration );
state.SetField( -1, "WindowFlags_NoInputs", ImGuiWindowFlags_NoInputs );
state.SetField( -1, "WindowFlags_NavFlattened", ImGuiWindowFlags_NavFlattened );
state.SetField( -1, "WindowFlags_ChildWindow", ImGuiWindowFlags_ChildWindow );
state.SetField( -1, "WindowFlags_Tooltip", ImGuiWindowFlags_Tooltip );
state.SetField( -1, "WindowFlags_Popup", ImGuiWindowFlags_Popup );
state.SetField( -1, "WindowFlags_Modal", ImGuiWindowFlags_Modal );
state.SetField( -1, "WindowFlags_ChildMenu", ImGuiWindowFlags_ChildMenu );
state.SetField( -1, "WindowFlags_DockNodeHost", ImGuiWindowFlags_DockNodeHost );
state.SetField( -1, "InputTextFlags_None", ImGuiInputTextFlags_None );
state.SetField( -1, "InputTextFlags_CharsDecimal", ImGuiInputTextFlags_CharsDecimal );
state.SetField( -1, "InputTextFlags_CharsHexadecimal", ImGuiInputTextFlags_CharsHexadecimal );
state.SetField( -1, "InputTextFlags_CharsUppercase", ImGuiInputTextFlags_CharsUppercase );
state.SetField( -1, "InputTextFlags_CharsNoBlank", ImGuiInputTextFlags_CharsNoBlank );
state.SetField( -1, "InputTextFlags_AutoSelectAll", ImGuiInputTextFlags_AutoSelectAll );
state.SetField( -1, "InputTextFlags_EnterReturnsTrue", ImGuiInputTextFlags_EnterReturnsTrue );
state.SetField( -1, "InputTextFlags_CallbackCompletion", ImGuiInputTextFlags_CallbackCompletion );
state.SetField( -1, "InputTextFlags_CallbackHistory", ImGuiInputTextFlags_CallbackHistory );
state.SetField( -1, "InputTextFlags_CallbackAlways", ImGuiInputTextFlags_CallbackAlways );
state.SetField( -1, "InputTextFlags_CallbackCharFilter", ImGuiInputTextFlags_CallbackCharFilter );
state.SetField( -1, "InputTextFlags_AllowTabInput", ImGuiInputTextFlags_AllowTabInput );
state.SetField( -1, "InputTextFlags_CtrlEnterForNewLine", ImGuiInputTextFlags_CtrlEnterForNewLine );
state.SetField( -1, "InputTextFlags_NoHorizontalScroll", ImGuiInputTextFlags_NoHorizontalScroll );
state.SetField( -1, "InputTextFlags_AlwaysOverwrite", ImGuiInputTextFlags_AlwaysOverwrite );
state.SetField( -1, "InputTextFlags_ReadOnly", ImGuiInputTextFlags_ReadOnly );
state.SetField( -1, "InputTextFlags_Password", ImGuiInputTextFlags_Password );
state.SetField( -1, "InputTextFlags_NoUndoRedo", ImGuiInputTextFlags_NoUndoRedo );
state.SetField( -1, "InputTextFlags_CharsScientific", ImGuiInputTextFlags_CharsScientific );
state.SetField( -1, "InputTextFlags_CallbackResize", ImGuiInputTextFlags_CallbackResize );
state.SetField( -1, "InputTextFlags_CallbackEdit", ImGuiInputTextFlags_CallbackEdit );
state.SetField( -1, "InputTextFlags_EscapeClearsAll", ImGuiInputTextFlags_EscapeClearsAll );
state.SetField( -1, "TreeNodeFlags_None", ImGuiTreeNodeFlags_None );
state.SetField( -1, "TreeNodeFlags_Selected", ImGuiTreeNodeFlags_Selected );
state.SetField( -1, "TreeNodeFlags_Framed", ImGuiTreeNodeFlags_Framed );
state.SetField( -1, "TreeNodeFlags_AllowItemOverlap", ImGuiTreeNodeFlags_AllowItemOverlap );
state.SetField( -1, "TreeNodeFlags_NoTreePushOnOpen", ImGuiTreeNodeFlags_NoTreePushOnOpen );
state.SetField( -1, "TreeNodeFlags_NoAutoOpenOnLog", ImGuiTreeNodeFlags_NoAutoOpenOnLog );
state.SetField( -1, "TreeNodeFlags_DefaultOpen", ImGuiTreeNodeFlags_DefaultOpen );
state.SetField( -1, "TreeNodeFlags_OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick );
state.SetField( -1, "TreeNodeFlags_OpenOnArrow", ImGuiTreeNodeFlags_OpenOnArrow );
state.SetField( -1, "TreeNodeFlags_Leaf", ImGuiTreeNodeFlags_Leaf );
state.SetField( -1, "TreeNodeFlags_Bullet", ImGuiTreeNodeFlags_Bullet );
state.SetField( -1, "TreeNodeFlags_FramePadding", ImGuiTreeNodeFlags_FramePadding );
state.SetField( -1, "TreeNodeFlags_SpanAvailWidth", ImGuiTreeNodeFlags_SpanAvailWidth );
state.SetField( -1, "TreeNodeFlags_SpanFullWidth", ImGuiTreeNodeFlags_SpanFullWidth );
state.SetField( -1, "TreeNodeFlags_NavLeftJumpsBackHere", ImGuiTreeNodeFlags_NavLeftJumpsBackHere );
state.SetField( -1, "TreeNodeFlags_CollapsingHeader", ImGuiTreeNodeFlags_CollapsingHeader );
state.SetField( -1, "PopupFlags_None", ImGuiPopupFlags_None );
state.SetField( -1, "PopupFlags_MouseButtonLeft", ImGuiPopupFlags_MouseButtonLeft );
state.SetField( -1, "PopupFlags_MouseButtonRight", ImGuiPopupFlags_MouseButtonRight );
state.SetField( -1, "PopupFlags_MouseButtonMiddle", ImGuiPopupFlags_MouseButtonMiddle );
state.SetField( -1, "PopupFlags_MouseButtonMask_", ImGuiPopupFlags_MouseButtonMask_ );
state.SetField( -1, "PopupFlags_MouseButtonDefault_", ImGuiPopupFlags_MouseButtonDefault_ );
state.SetField( -1, "PopupFlags_NoOpenOverExistingPopup", ImGuiPopupFlags_NoOpenOverExistingPopup );
state.SetField( -1, "PopupFlags_NoOpenOverItems", ImGuiPopupFlags_NoOpenOverItems );
state.SetField( -1, "PopupFlags_AnyPopupId", ImGuiPopupFlags_AnyPopupId );
state.SetField( -1, "PopupFlags_AnyPopupLevel", ImGuiPopupFlags_AnyPopupLevel );
state.SetField( -1, "PopupFlags_AnyPopup", ImGuiPopupFlags_AnyPopup );
state.SetField( -1, "SelectableFlags_None", ImGuiSelectableFlags_None );
state.SetField( -1, "SelectableFlags_DontClosePopups", ImGuiSelectableFlags_DontClosePopups );
state.SetField( -1, "SelectableFlags_SpanAllColumns", ImGuiSelectableFlags_SpanAllColumns );
state.SetField( -1, "SelectableFlags_AllowDoubleClick", ImGuiSelectableFlags_AllowDoubleClick );
state.SetField( -1, "SelectableFlags_Disabled", ImGuiSelectableFlags_Disabled );
state.SetField( -1, "SelectableFlags_AllowItemOverlap", ImGuiSelectableFlags_AllowItemOverlap );
state.SetField( -1, "ComboFlags_None", ImGuiComboFlags_None );
state.SetField( -1, "ComboFlags_PopupAlignLeft", ImGuiComboFlags_PopupAlignLeft );
state.SetField( -1, "ComboFlags_HeightSmall", ImGuiComboFlags_HeightSmall );
state.SetField( -1, "ComboFlags_HeightRegular", ImGuiComboFlags_HeightRegular );
state.SetField( -1, "ComboFlags_HeightLarge", ImGuiComboFlags_HeightLarge );
state.SetField( -1, "ComboFlags_HeightLargest", ImGuiComboFlags_HeightLargest );
state.SetField( -1, "ComboFlags_NoArrowButton", ImGuiComboFlags_NoArrowButton );
state.SetField( -1, "ComboFlags_NoPreview", ImGuiComboFlags_NoPreview );
state.SetField( -1, "ComboFlags_HeightMask_", ImGuiComboFlags_HeightMask_ );
state.SetField( -1, "TabBarFlags_None", ImGuiTabBarFlags_None );
state.SetField( -1, "TabBarFlags_Reorderable", ImGuiTabBarFlags_Reorderable );
state.SetField( -1, "TabBarFlags_AutoSelectNewTabs", ImGuiTabBarFlags_AutoSelectNewTabs );
state.SetField( -1, "TabBarFlags_TabListPopupButton", ImGuiTabBarFlags_TabListPopupButton );
state.SetField( -1, "TabBarFlags_NoCloseWithMiddleMouseButton", ImGuiTabBarFlags_NoCloseWithMiddleMouseButton );
state.SetField( -1, "TabBarFlags_NoTabListScrollingButtons", ImGuiTabBarFlags_NoTabListScrollingButtons );
state.SetField( -1, "TabBarFlags_NoTooltip", ImGuiTabBarFlags_NoTooltip );
state.SetField( -1, "TabBarFlags_FittingPolicyResizeDown", ImGuiTabBarFlags_FittingPolicyResizeDown );
state.SetField( -1, "TabBarFlags_FittingPolicyScroll", ImGuiTabBarFlags_FittingPolicyScroll );
state.SetField( -1, "TabBarFlags_FittingPolicyMask_", ImGuiTabBarFlags_FittingPolicyMask_ );
state.SetField( -1, "TabBarFlags_FittingPolicyDefault_", ImGuiTabBarFlags_FittingPolicyDefault_ );
state.SetField( -1, "TabItemFlags_None", ImGuiTabItemFlags_None );
state.SetField( -1, "TabItemFlags_UnsavedDocument", ImGuiTabItemFlags_UnsavedDocument );
state.SetField( -1, "TabItemFlags_SetSelected", ImGuiTabItemFlags_SetSelected );
state.SetField( -1, "TabItemFlags_NoCloseWithMiddleMouseButton", ImGuiTabItemFlags_NoCloseWithMiddleMouseButton );
state.SetField( -1, "TabItemFlags_NoPushId", ImGuiTabItemFlags_NoPushId );
state.SetField( -1, "TabItemFlags_NoTooltip", ImGuiTabItemFlags_NoTooltip );
state.SetField( -1, "TabItemFlags_NoReorder", ImGuiTabItemFlags_NoReorder );
state.SetField( -1, "TabItemFlags_Leading", ImGuiTabItemFlags_Leading );
state.SetField( -1, "TabItemFlags_Trailing", ImGuiTabItemFlags_Trailing );
state.SetField( -1, "TableFlags_None", ImGuiTableFlags_None );
state.SetField( -1, "TableFlags_Resizable", ImGuiTableFlags_Resizable );
state.SetField( -1, "TableFlags_Reorderable", ImGuiTableFlags_Reorderable );
state.SetField( -1, "TableFlags_Hideable", ImGuiTableFlags_Hideable );
state.SetField( -1, "TableFlags_Sortable", ImGuiTableFlags_Sortable );
state.SetField( -1, "TableFlags_NoSavedSettings", ImGuiTableFlags_NoSavedSettings );
state.SetField( -1, "TableFlags_ContextMenuInBody", ImGuiTableFlags_ContextMenuInBody );
state.SetField( -1, "TableFlags_RowBg", ImGuiTableFlags_RowBg );
state.SetField( -1, "TableFlags_BordersInnerH", ImGuiTableFlags_BordersInnerH );
state.SetField( -1, "TableFlags_BordersOuterH", ImGuiTableFlags_BordersOuterH );
state.SetField( -1, "TableFlags_BordersInnerV", ImGuiTableFlags_BordersInnerV );
state.SetField( -1, "TableFlags_BordersOuterV", ImGuiTableFlags_BordersOuterV );
state.SetField( -1, "TableFlags_BordersH", ImGuiTableFlags_BordersH );
state.SetField( -1, "TableFlags_BordersV", ImGuiTableFlags_BordersV );
state.SetField( -1, "TableFlags_BordersInner", ImGuiTableFlags_BordersInner );
state.SetField( -1, "TableFlags_BordersOuter", ImGuiTableFlags_BordersOuter );
state.SetField( -1, "TableFlags_Borders", ImGuiTableFlags_Borders );
state.SetField( -1, "TableFlags_NoBordersInBody", ImGuiTableFlags_NoBordersInBody );
state.SetField( -1, "TableFlags_NoBordersInBodyUntilResize", ImGuiTableFlags_NoBordersInBodyUntilResize );
state.SetField( -1, "TableFlags_SizingFixedFit", ImGuiTableFlags_SizingFixedFit );
state.SetField( -1, "TableFlags_SizingFixedSame", ImGuiTableFlags_SizingFixedSame );
state.SetField( -1, "TableFlags_SizingStretchProp", ImGuiTableFlags_SizingStretchProp );
state.SetField( -1, "TableFlags_SizingStretchSame", ImGuiTableFlags_SizingStretchSame );
state.SetField( -1, "TableFlags_NoHostExtendX", ImGuiTableFlags_NoHostExtendX );
state.SetField( -1, "TableFlags_NoHostExtendY", ImGuiTableFlags_NoHostExtendY );
state.SetField( -1, "TableFlags_NoKeepColumnsVisible", ImGuiTableFlags_NoKeepColumnsVisible );
state.SetField( -1, "TableFlags_PreciseWidths", ImGuiTableFlags_PreciseWidths );
state.SetField( -1, "TableFlags_NoClip", ImGuiTableFlags_NoClip );
state.SetField( -1, "TableFlags_PadOuterX", ImGuiTableFlags_PadOuterX );
state.SetField( -1, "TableFlags_NoPadOuterX", ImGuiTableFlags_NoPadOuterX );
state.SetField( -1, "TableFlags_NoPadInnerX", ImGuiTableFlags_NoPadInnerX );
state.SetField( -1, "TableFlags_ScrollX", ImGuiTableFlags_ScrollX );
state.SetField( -1, "TableFlags_ScrollY", ImGuiTableFlags_ScrollY );
state.SetField( -1, "TableFlags_SortMulti", ImGuiTableFlags_SortMulti );
state.SetField( -1, "TableFlags_SortTristate", ImGuiTableFlags_SortTristate );
state.SetField( -1, "TableFlags_SizingMask_", ImGuiTableFlags_SizingMask_ );
state.SetField( -1, "TableColumnFlags_None", ImGuiTableColumnFlags_None );
state.SetField( -1, "TableColumnFlags_Disabled", ImGuiTableColumnFlags_Disabled );
state.SetField( -1, "TableColumnFlags_DefaultHide", ImGuiTableColumnFlags_DefaultHide );
state.SetField( -1, "TableColumnFlags_DefaultSort", ImGuiTableColumnFlags_DefaultSort );
state.SetField( -1, "TableColumnFlags_WidthStretch", ImGuiTableColumnFlags_WidthStretch );
state.SetField( -1, "TableColumnFlags_WidthFixed", ImGuiTableColumnFlags_WidthFixed );
state.SetField( -1, "TableColumnFlags_NoResize", ImGuiTableColumnFlags_NoResize );
state.SetField( -1, "TableColumnFlags_NoReorder", ImGuiTableColumnFlags_NoReorder );
state.SetField( -1, "TableColumnFlags_NoHide", ImGuiTableColumnFlags_NoHide );
state.SetField( -1, "TableColumnFlags_NoClip", ImGuiTableColumnFlags_NoClip );
state.SetField( -1, "TableColumnFlags_NoSort", ImGuiTableColumnFlags_NoSort );
state.SetField( -1, "TableColumnFlags_NoSortAscending", ImGuiTableColumnFlags_NoSortAscending );
state.SetField( -1, "TableColumnFlags_NoSortDescending", ImGuiTableColumnFlags_NoSortDescending );
state.SetField( -1, "TableColumnFlags_NoHeaderLabel", ImGuiTableColumnFlags_NoHeaderLabel );
state.SetField( -1, "TableColumnFlags_NoHeaderWidth", ImGuiTableColumnFlags_NoHeaderWidth );
state.SetField( -1, "TableColumnFlags_PreferSortAscending", ImGuiTableColumnFlags_PreferSortAscending );
state.SetField( -1, "TableColumnFlags_PreferSortDescending", ImGuiTableColumnFlags_PreferSortDescending );
state.SetField( -1, "TableColumnFlags_IndentEnable", ImGuiTableColumnFlags_IndentEnable );
state.SetField( -1, "TableColumnFlags_IndentDisable", ImGuiTableColumnFlags_IndentDisable );
state.SetField( -1, "TableColumnFlags_IsEnabled", ImGuiTableColumnFlags_IsEnabled );
state.SetField( -1, "TableColumnFlags_IsVisible", ImGuiTableColumnFlags_IsVisible );
state.SetField( -1, "TableColumnFlags_IsSorted", ImGuiTableColumnFlags_IsSorted );
state.SetField( -1, "TableColumnFlags_IsHovered", ImGuiTableColumnFlags_IsHovered );
state.SetField( -1, "TableColumnFlags_WidthMask_", ImGuiTableColumnFlags_WidthMask_ );
state.SetField( -1, "TableColumnFlags_IndentMask_", ImGuiTableColumnFlags_IndentMask_ );
state.SetField( -1, "TableColumnFlags_StatusMask_", ImGuiTableColumnFlags_StatusMask_ );
state.SetField( -1, "TableColumnFlags_NoDirectResize_", ImGuiTableColumnFlags_NoDirectResize_ );
state.SetField( -1, "TableRowFlags_None", ImGuiTableRowFlags_None );
state.SetField( -1, "TableRowFlags_Headers", ImGuiTableRowFlags_Headers );
state.SetField( -1, "TableBgTarget_None", ImGuiTableBgTarget_None );
state.SetField( -1, "TableBgTarget_RowBg0", ImGuiTableBgTarget_RowBg0 );
state.SetField( -1, "TableBgTarget_RowBg1", ImGuiTableBgTarget_RowBg1 );
state.SetField( -1, "TableBgTarget_CellBg", ImGuiTableBgTarget_CellBg );
state.SetField( -1, "FocusedFlags_None", ImGuiFocusedFlags_None );
state.SetField( -1, "FocusedFlags_ChildWindows", ImGuiFocusedFlags_ChildWindows );
state.SetField( -1, "FocusedFlags_RootWindow", ImGuiFocusedFlags_RootWindow );
state.SetField( -1, "FocusedFlags_AnyWindow", ImGuiFocusedFlags_AnyWindow );
state.SetField( -1, "FocusedFlags_NoPopupHierarchy", ImGuiFocusedFlags_NoPopupHierarchy );
state.SetField( -1, "FocusedFlags_DockHierarchy", ImGuiFocusedFlags_DockHierarchy );
state.SetField( -1, "FocusedFlags_RootAndChildWindows", ImGuiFocusedFlags_RootAndChildWindows );
state.SetField( -1, "HoveredFlags_None", ImGuiHoveredFlags_None );
state.SetField( -1, "HoveredFlags_ChildWindows", ImGuiHoveredFlags_ChildWindows );
state.SetField( -1, "HoveredFlags_RootWindow", ImGuiHoveredFlags_RootWindow );
state.SetField( -1, "HoveredFlags_AnyWindow", ImGuiHoveredFlags_AnyWindow );
state.SetField( -1, "HoveredFlags_NoPopupHierarchy", ImGuiHoveredFlags_NoPopupHierarchy );
state.SetField( -1, "HoveredFlags_DockHierarchy", ImGuiHoveredFlags_DockHierarchy );
state.SetField( -1, "HoveredFlags_AllowWhenBlockedByPopup", ImGuiHoveredFlags_AllowWhenBlockedByPopup );
state.SetField( -1, "HoveredFlags_AllowWhenBlockedByActiveItem", ImGuiHoveredFlags_AllowWhenBlockedByActiveItem );
state.SetField( -1, "HoveredFlags_AllowWhenOverlapped", ImGuiHoveredFlags_AllowWhenOverlapped );
state.SetField( -1, "HoveredFlags_AllowWhenDisabled", ImGuiHoveredFlags_AllowWhenDisabled );
state.SetField( -1, "HoveredFlags_NoNavOverride", ImGuiHoveredFlags_NoNavOverride );
state.SetField( -1, "HoveredFlags_RectOnly", ImGuiHoveredFlags_RectOnly );
state.SetField( -1, "HoveredFlags_RootAndChildWindows", ImGuiHoveredFlags_RootAndChildWindows );
state.SetField( -1, "HoveredFlags_DelayNormal", ImGuiHoveredFlags_DelayNormal );
state.SetField( -1, "HoveredFlags_DelayShort", ImGuiHoveredFlags_DelayShort );
state.SetField( -1, "HoveredFlags_NoSharedDelay", ImGuiHoveredFlags_NoSharedDelay );
state.SetField( -1, "DockNodeFlags_None", ImGuiDockNodeFlags_None );
state.SetField( -1, "DockNodeFlags_KeepAliveOnly", ImGuiDockNodeFlags_KeepAliveOnly );
state.SetField( -1, "DockNodeFlags_NoDockingInCentralNode", ImGuiDockNodeFlags_NoDockingInCentralNode );
state.SetField( -1, "DockNodeFlags_PassthruCentralNode", ImGuiDockNodeFlags_PassthruCentralNode );
state.SetField( -1, "DockNodeFlags_NoSplit", ImGuiDockNodeFlags_NoSplit );
state.SetField( -1, "DockNodeFlags_NoResize", ImGuiDockNodeFlags_NoResize );
state.SetField( -1, "DockNodeFlags_AutoHideTabBar", ImGuiDockNodeFlags_AutoHideTabBar );
state.SetField( -1, "DragDropFlags_None", ImGuiDragDropFlags_None );
state.SetField( -1, "DragDropFlags_SourceNoPreviewTooltip", ImGuiDragDropFlags_SourceNoPreviewTooltip );
state.SetField( -1, "DragDropFlags_SourceNoDisableHover", ImGuiDragDropFlags_SourceNoDisableHover );
state.SetField( -1, "DragDropFlags_SourceNoHoldToOpenOthers", ImGuiDragDropFlags_SourceNoHoldToOpenOthers );
state.SetField( -1, "DragDropFlags_SourceAllowNullID", ImGuiDragDropFlags_SourceAllowNullID );
state.SetField( -1, "DragDropFlags_SourceExtern", ImGuiDragDropFlags_SourceExtern );
state.SetField( -1, "DragDropFlags_SourceAutoExpirePayload", ImGuiDragDropFlags_SourceAutoExpirePayload );
state.SetField( -1, "DragDropFlags_AcceptBeforeDelivery", ImGuiDragDropFlags_AcceptBeforeDelivery );
state.SetField( -1, "DragDropFlags_AcceptNoDrawDefaultRect", ImGuiDragDropFlags_AcceptNoDrawDefaultRect );
state.SetField( -1, "DragDropFlags_AcceptNoPreviewTooltip", ImGuiDragDropFlags_AcceptNoPreviewTooltip );
state.SetField( -1, "DragDropFlags_AcceptPeekOnly", ImGuiDragDropFlags_AcceptPeekOnly );
state.SetField( -1, "DataType_S8", ImGuiDataType_S8 );
state.SetField( -1, "DataType_U8", ImGuiDataType_U8 );
state.SetField( -1, "DataType_S16", ImGuiDataType_S16 );
state.SetField( -1, "DataType_U16", ImGuiDataType_U16 );
state.SetField( -1, "DataType_S32", ImGuiDataType_S32 );
state.SetField( -1, "DataType_U32", ImGuiDataType_U32 );
state.SetField( -1, "DataType_S64", ImGuiDataType_S64 );
state.SetField( -1, "DataType_U64", ImGuiDataType_U64 );
state.SetField( -1, "DataType_Float", ImGuiDataType_Float );
state.SetField( -1, "DataType_Double", ImGuiDataType_Double );
state.SetField( -1, "DataType_COUNT", ImGuiDataType_COUNT );
state.SetField( -1, "Dir_None", ImGuiDir_None );
state.SetField( -1, "Dir_Left", ImGuiDir_Left );
state.SetField( -1, "Dir_Right", ImGuiDir_Right );
state.SetField( -1, "Dir_Up", ImGuiDir_Up );
state.SetField( -1, "Dir_Down", ImGuiDir_Down );
state.SetField( -1, "Dir_COUNT", ImGuiDir_COUNT );
state.SetField( -1, "SortDirection_None", ImGuiSortDirection_None );
state.SetField( -1, "SortDirection_Ascending", ImGuiSortDirection_Ascending );
state.SetField( -1, "SortDirection_Descending", ImGuiSortDirection_Descending );
state.SetField( -1, "NavInput_Activate", ImGuiNavInput_Activate );
state.SetField( -1, "NavInput_Cancel", ImGuiNavInput_Cancel );
state.SetField( -1, "NavInput_Input", ImGuiNavInput_Input );
state.SetField( -1, "NavInput_Menu", ImGuiNavInput_Menu );
state.SetField( -1, "NavInput_DpadLeft", ImGuiNavInput_DpadLeft );
state.SetField( -1, "NavInput_DpadRight", ImGuiNavInput_DpadRight );
state.SetField( -1, "NavInput_DpadUp", ImGuiNavInput_DpadUp );
state.SetField( -1, "NavInput_DpadDown", ImGuiNavInput_DpadDown );
state.SetField( -1, "NavInput_LStickLeft", ImGuiNavInput_LStickLeft );
state.SetField( -1, "NavInput_LStickRight", ImGuiNavInput_LStickRight );
state.SetField( -1, "NavInput_LStickUp", ImGuiNavInput_LStickUp );
state.SetField( -1, "NavInput_LStickDown", ImGuiNavInput_LStickDown );
state.SetField( -1, "NavInput_FocusPrev", ImGuiNavInput_FocusPrev );
state.SetField( -1, "NavInput_FocusNext", ImGuiNavInput_FocusNext );
state.SetField( -1, "NavInput_TweakSlow", ImGuiNavInput_TweakSlow );
state.SetField( -1, "NavInput_TweakFast", ImGuiNavInput_TweakFast );
state.SetField( -1, "NavInput_COUNT", ImGuiNavInput_COUNT );
state.SetField( -1, "ConfigFlags_None", ImGuiConfigFlags_None );
state.SetField( -1, "ConfigFlags_NavEnableKeyboard", ImGuiConfigFlags_NavEnableKeyboard );
state.SetField( -1, "ConfigFlags_NavEnableGamepad", ImGuiConfigFlags_NavEnableGamepad );
state.SetField( -1, "ConfigFlags_NavEnableSetMousePos", ImGuiConfigFlags_NavEnableSetMousePos );
state.SetField( -1, "ConfigFlags_NavNoCaptureKeyboard", ImGuiConfigFlags_NavNoCaptureKeyboard );
state.SetField( -1, "ConfigFlags_NoMouse", ImGuiConfigFlags_NoMouse );
state.SetField( -1, "ConfigFlags_NoMouseCursorChange", ImGuiConfigFlags_NoMouseCursorChange );
state.SetField( -1, "ConfigFlags_DockingEnable", ImGuiConfigFlags_DockingEnable );
state.SetField( -1, "ConfigFlags_ViewportsEnable", ImGuiConfigFlags_ViewportsEnable );
state.SetField( -1, "ConfigFlags_DpiEnableScaleViewports", ImGuiConfigFlags_DpiEnableScaleViewports );
state.SetField( -1, "ConfigFlags_DpiEnableScaleFonts", ImGuiConfigFlags_DpiEnableScaleFonts );
state.SetField( -1, "ConfigFlags_IsSRGB", ImGuiConfigFlags_IsSRGB );
state.SetField( -1, "ConfigFlags_IsTouchScreen", ImGuiConfigFlags_IsTouchScreen );
state.SetField( -1, "BackendFlags_None", ImGuiBackendFlags_None );
state.SetField( -1, "BackendFlags_HasGamepad", ImGuiBackendFlags_HasGamepad );
state.SetField( -1, "BackendFlags_HasMouseCursors", ImGuiBackendFlags_HasMouseCursors );
state.SetField( -1, "BackendFlags_HasSetMousePos", ImGuiBackendFlags_HasSetMousePos );
state.SetField( -1, "BackendFlags_RendererHasVtxOffset", ImGuiBackendFlags_RendererHasVtxOffset );
state.SetField( -1, "BackendFlags_PlatformHasViewports", ImGuiBackendFlags_PlatformHasViewports );
state.SetField( -1, "BackendFlags_HasMouseHoveredViewport", ImGuiBackendFlags_HasMouseHoveredViewport );
state.SetField( -1, "BackendFlags_RendererHasViewports", ImGuiBackendFlags_RendererHasViewports );
state.SetField( -1, "Col_Text", ImGuiCol_Text );
state.SetField( -1, "Col_TextDisabled", ImGuiCol_TextDisabled );
state.SetField( -1, "Col_WindowBg", ImGuiCol_WindowBg );
state.SetField( -1, "Col_ChildBg", ImGuiCol_ChildBg );
state.SetField( -1, "Col_PopupBg", ImGuiCol_PopupBg );
state.SetField( -1, "Col_Border", ImGuiCol_Border );
state.SetField( -1, "Col_BorderShadow", ImGuiCol_BorderShadow );
state.SetField( -1, "Col_FrameBg", ImGuiCol_FrameBg );
state.SetField( -1, "Col_FrameBgHovered", ImGuiCol_FrameBgHovered );
state.SetField( -1, "Col_FrameBgActive", ImGuiCol_FrameBgActive );
state.SetField( -1, "Col_TitleBg", ImGuiCol_TitleBg );
state.SetField( -1, "Col_TitleBgActive", ImGuiCol_TitleBgActive );
state.SetField( -1, "Col_TitleBgCollapsed", ImGuiCol_TitleBgCollapsed );
state.SetField( -1, "Col_MenuBarBg", ImGuiCol_MenuBarBg );
state.SetField( -1, "Col_ScrollbarBg", ImGuiCol_ScrollbarBg );
state.SetField( -1, "Col_ScrollbarGrab", ImGuiCol_ScrollbarGrab );
state.SetField( -1, "Col_ScrollbarGrabHovered", ImGuiCol_ScrollbarGrabHovered );
state.SetField( -1, "Col_ScrollbarGrabActive", ImGuiCol_ScrollbarGrabActive );
state.SetField( -1, "Col_CheckMark", ImGuiCol_CheckMark );
state.SetField( -1, "Col_SliderGrab", ImGuiCol_SliderGrab );
state.SetField( -1, "Col_SliderGrabActive", ImGuiCol_SliderGrabActive );
state.SetField( -1, "Col_Button", ImGuiCol_Button );
state.SetField( -1, "Col_ButtonHovered", ImGuiCol_ButtonHovered );
state.SetField( -1, "Col_ButtonActive", ImGuiCol_ButtonActive );
state.SetField( -1, "Col_Header", ImGuiCol_Header );
state.SetField( -1, "Col_HeaderHovered", ImGuiCol_HeaderHovered );
state.SetField( -1, "Col_HeaderActive", ImGuiCol_HeaderActive );
state.SetField( -1, "Col_Separator", ImGuiCol_Separator );
state.SetField( -1, "Col_SeparatorHovered", ImGuiCol_SeparatorHovered );
state.SetField( -1, "Col_SeparatorActive", ImGuiCol_SeparatorActive );
state.SetField( -1, "Col_ResizeGrip", ImGuiCol_ResizeGrip );
state.SetField( -1, "Col_ResizeGripHovered", ImGuiCol_ResizeGripHovered );
state.SetField( -1, "Col_ResizeGripActive", ImGuiCol_ResizeGripActive );
state.SetField( -1, "Col_Tab", ImGuiCol_Tab );
state.SetField( -1, "Col_TabHovered", ImGuiCol_TabHovered );
state.SetField( -1, "Col_TabActive", ImGuiCol_TabActive );
state.SetField( -1, "Col_TabUnfocused", ImGuiCol_TabUnfocused );
state.SetField( -1, "Col_TabUnfocusedActive", ImGuiCol_TabUnfocusedActive );
state.SetField( -1, "Col_DockingPreview", ImGuiCol_DockingPreview );
state.SetField( -1, "Col_DockingEmptyBg", ImGuiCol_DockingEmptyBg );
state.SetField( -1, "Col_PlotLines", ImGuiCol_PlotLines );
state.SetField( -1, "Col_PlotLinesHovered", ImGuiCol_PlotLinesHovered );
state.SetField( -1, "Col_PlotHistogram", ImGuiCol_PlotHistogram );
state.SetField( -1, "Col_PlotHistogramHovered", ImGuiCol_PlotHistogramHovered );
state.SetField( -1, "Col_TableHeaderBg", ImGuiCol_TableHeaderBg );
state.SetField( -1, "Col_TableBorderStrong", ImGuiCol_TableBorderStrong );
state.SetField( -1, "Col_TableBorderLight", ImGuiCol_TableBorderLight );
state.SetField( -1, "Col_TableRowBg", ImGuiCol_TableRowBg );
state.SetField( -1, "Col_TableRowBgAlt", ImGuiCol_TableRowBgAlt );
state.SetField( -1, "Col_TextSelectedBg", ImGuiCol_TextSelectedBg );
state.SetField( -1, "Col_DragDropTarget", ImGuiCol_DragDropTarget );
state.SetField( -1, "Col_NavHighlight", ImGuiCol_NavHighlight );
state.SetField( -1, "Col_NavWindowingHighlight", ImGuiCol_NavWindowingHighlight );
state.SetField( -1, "Col_NavWindowingDimBg", ImGuiCol_NavWindowingDimBg );
state.SetField( -1, "Col_ModalWindowDimBg", ImGuiCol_ModalWindowDimBg );
state.SetField( -1, "Col_COUNT", ImGuiCol_COUNT );
state.SetField( -1, "StyleVar_Alpha", ImGuiStyleVar_Alpha );
state.SetField( -1, "StyleVar_DisabledAlpha", ImGuiStyleVar_DisabledAlpha );
state.SetField( -1, "StyleVar_WindowPadding", ImGuiStyleVar_WindowPadding );
state.SetField( -1, "StyleVar_WindowRounding", ImGuiStyleVar_WindowRounding );
state.SetField( -1, "StyleVar_WindowBorderSize", ImGuiStyleVar_WindowBorderSize );
state.SetField( -1, "StyleVar_WindowMinSize", ImGuiStyleVar_WindowMinSize );
state.SetField( -1, "StyleVar_WindowTitleAlign", ImGuiStyleVar_WindowTitleAlign );
state.SetField( -1, "StyleVar_ChildRounding", ImGuiStyleVar_ChildRounding );
state.SetField( -1, "StyleVar_ChildBorderSize", ImGuiStyleVar_ChildBorderSize );
state.SetField( -1, "StyleVar_PopupRounding", ImGuiStyleVar_PopupRounding );
state.SetField( -1, "StyleVar_PopupBorderSize", ImGuiStyleVar_PopupBorderSize );
state.SetField( -1, "StyleVar_FramePadding", ImGuiStyleVar_FramePadding );
state.SetField( -1, "StyleVar_FrameRounding", ImGuiStyleVar_FrameRounding );
state.SetField( -1, "StyleVar_FrameBorderSize", ImGuiStyleVar_FrameBorderSize );
state.SetField( -1, "StyleVar_ItemSpacing", ImGuiStyleVar_ItemSpacing );
state.SetField( -1, "StyleVar_ItemInnerSpacing", ImGuiStyleVar_ItemInnerSpacing );
state.SetField( -1, "StyleVar_IndentSpacing", ImGuiStyleVar_IndentSpacing );
state.SetField( -1, "StyleVar_CellPadding", ImGuiStyleVar_CellPadding );
state.SetField( -1, "StyleVar_ScrollbarSize", ImGuiStyleVar_ScrollbarSize );
state.SetField( -1, "StyleVar_ScrollbarRounding", ImGuiStyleVar_ScrollbarRounding );
state.SetField( -1, "StyleVar_GrabMinSize", ImGuiStyleVar_GrabMinSize );
state.SetField( -1, "StyleVar_GrabRounding", ImGuiStyleVar_GrabRounding );
state.SetField( -1, "StyleVar_TabRounding", ImGuiStyleVar_TabRounding );
state.SetField( -1, "StyleVar_ButtonTextAlign", ImGuiStyleVar_ButtonTextAlign );
state.SetField( -1, "StyleVar_SelectableTextAlign", ImGuiStyleVar_SelectableTextAlign );
state.SetField( -1, "StyleVar_SeparatorTextBorderSize", ImGuiStyleVar_SeparatorTextBorderSize );
state.SetField( -1, "StyleVar_SeparatorTextAlign", ImGuiStyleVar_SeparatorTextAlign );
state.SetField( -1, "StyleVar_SeparatorTextPadding", ImGuiStyleVar_SeparatorTextPadding );
state.SetField( -1, "StyleVar_COUNT", ImGuiStyleVar_COUNT );
state.SetField( -1, "ButtonFlags_None", ImGuiButtonFlags_None );
state.SetField( -1, "ButtonFlags_MouseButtonLeft", ImGuiButtonFlags_MouseButtonLeft );
state.SetField( -1, "ButtonFlags_MouseButtonRight", ImGuiButtonFlags_MouseButtonRight );
state.SetField( -1, "ButtonFlags_MouseButtonMiddle", ImGuiButtonFlags_MouseButtonMiddle );
state.SetField( -1, "ButtonFlags_MouseButtonMask_", ImGuiButtonFlags_MouseButtonMask_ );
state.SetField( -1, "ButtonFlags_MouseButtonDefault_", ImGuiButtonFlags_MouseButtonDefault_ );
state.SetField( -1, "ColorEditFlags_None", ImGuiColorEditFlags_None );
state.SetField( -1, "ColorEditFlags_NoAlpha", ImGuiColorEditFlags_NoAlpha );
state.SetField( -1, "ColorEditFlags_NoPicker", ImGuiColorEditFlags_NoPicker );
state.SetField( -1, "ColorEditFlags_NoOptions", ImGuiColorEditFlags_NoOptions );
state.SetField( -1, "ColorEditFlags_NoSmallPreview", ImGuiColorEditFlags_NoSmallPreview );
state.SetField( -1, "ColorEditFlags_NoInputs", ImGuiColorEditFlags_NoInputs );
state.SetField( -1, "ColorEditFlags_NoTooltip", ImGuiColorEditFlags_NoTooltip );
state.SetField( -1, "ColorEditFlags_NoLabel", ImGuiColorEditFlags_NoLabel );
state.SetField( -1, "ColorEditFlags_NoSidePreview", ImGuiColorEditFlags_NoSidePreview );
state.SetField( -1, "ColorEditFlags_NoDragDrop", ImGuiColorEditFlags_NoDragDrop );
state.SetField( -1, "ColorEditFlags_NoBorder", ImGuiColorEditFlags_NoBorder );
state.SetField( -1, "ColorEditFlags_AlphaBar", ImGuiColorEditFlags_AlphaBar );
state.SetField( -1, "ColorEditFlags_AlphaPreview", ImGuiColorEditFlags_AlphaPreview );
state.SetField( -1, "ColorEditFlags_AlphaPreviewHalf", ImGuiColorEditFlags_AlphaPreviewHalf );
state.SetField( -1, "ColorEditFlags_HDR", ImGuiColorEditFlags_HDR );
state.SetField( -1, "ColorEditFlags_DisplayRGB", ImGuiColorEditFlags_DisplayRGB );
state.SetField( -1, "ColorEditFlags_DisplayHSV", ImGuiColorEditFlags_DisplayHSV );
state.SetField( -1, "ColorEditFlags_DisplayHex", ImGuiColorEditFlags_DisplayHex );
state.SetField( -1, "ColorEditFlags_Uint8", ImGuiColorEditFlags_Uint8 );
state.SetField( -1, "ColorEditFlags_Float", ImGuiColorEditFlags_Float );
state.SetField( -1, "ColorEditFlags_PickerHueBar", ImGuiColorEditFlags_PickerHueBar );
state.SetField( -1, "ColorEditFlags_PickerHueWheel", ImGuiColorEditFlags_PickerHueWheel );
state.SetField( -1, "ColorEditFlags_InputRGB", ImGuiColorEditFlags_InputRGB );
state.SetField( -1, "ColorEditFlags_InputHSV", ImGuiColorEditFlags_InputHSV );
state.SetField( -1, "ColorEditFlags_DefaultOptions_", ImGuiColorEditFlags_DefaultOptions_ );
state.SetField( -1, "ColorEditFlags_DisplayMask_", ImGuiColorEditFlags_DisplayMask_ );
state.SetField( -1, "ColorEditFlags_DataTypeMask_", ImGuiColorEditFlags_DataTypeMask_ );
state.SetField( -1, "ColorEditFlags_PickerMask_", ImGuiColorEditFlags_PickerMask_ );
state.SetField( -1, "ColorEditFlags_InputMask_", ImGuiColorEditFlags_InputMask_ );
state.SetField( -1, "SliderFlags_None", ImGuiSliderFlags_None );
state.SetField( -1, "SliderFlags_AlwaysClamp", ImGuiSliderFlags_AlwaysClamp );
state.SetField( -1, "SliderFlags_Logarithmic", ImGuiSliderFlags_Logarithmic );
state.SetField( -1, "SliderFlags_NoRoundToFormat", ImGuiSliderFlags_NoRoundToFormat );
state.SetField( -1, "SliderFlags_NoInput", ImGuiSliderFlags_NoInput );
state.SetField( -1, "SliderFlags_InvalidMask_", ImGuiSliderFlags_InvalidMask_ );
state.SetField( -1, "MouseButton_Left", ImGuiMouseButton_Left );
state.SetField( -1, "MouseButton_Right", ImGuiMouseButton_Right );
state.SetField( -1, "MouseButton_Middle", ImGuiMouseButton_Middle );
state.SetField( -1, "MouseButton_COUNT", ImGuiMouseButton_COUNT );
state.SetField( -1, "MouseCursor_None", ImGuiMouseCursor_None );
state.SetField( -1, "MouseCursor_Arrow", ImGuiMouseCursor_Arrow );
state.SetField( -1, "MouseCursor_TextInput", ImGuiMouseCursor_TextInput );
state.SetField( -1, "MouseCursor_ResizeAll", ImGuiMouseCursor_ResizeAll );
state.SetField( -1, "MouseCursor_ResizeNS", ImGuiMouseCursor_ResizeNS );
state.SetField( -1, "MouseCursor_ResizeEW", ImGuiMouseCursor_ResizeEW );
state.SetField( -1, "MouseCursor_ResizeNESW", ImGuiMouseCursor_ResizeNESW );
state.SetField( -1, "MouseCursor_ResizeNWSE", ImGuiMouseCursor_ResizeNWSE );
state.SetField( -1, "MouseCursor_Hand", ImGuiMouseCursor_Hand );
state.SetField( -1, "MouseCursor_NotAllowed", ImGuiMouseCursor_NotAllowed );
state.SetField( -1, "MouseCursor_COUNT", ImGuiMouseCursor_COUNT );
state.SetField( -1, "Cond_None", ImGuiCond_None );
state.SetField( -1, "Cond_Always", ImGuiCond_Always );
state.SetField( -1, "Cond_Once", ImGuiCond_Once );
state.SetField( -1, "Cond_FirstUseEver", ImGuiCond_FirstUseEver );
state.SetField( -1, "Cond_Appearing", ImGuiCond_Appearing );
state.SetField( -1, "ImDrawFlags_None", ImDrawFlags_None );
state.SetField( -1, "ImDrawFlags_Closed", ImDrawFlags_Closed );
state.SetField( -1, "ImDrawFlags_RoundCornersTopLeft", ImDrawFlags_RoundCornersTopLeft );
state.SetField( -1, "ImDrawFlags_RoundCornersTopRight", ImDrawFlags_RoundCornersTopRight );
state.SetField( -1, "ImDrawFlags_RoundCornersBottomLeft", ImDrawFlags_RoundCornersBottomLeft );
state.SetField( -1, "ImDrawFlags_RoundCornersBottomRight", ImDrawFlags_RoundCornersBottomRight );
state.SetField( -1, "ImDrawFlags_RoundCornersNone", ImDrawFlags_RoundCornersNone );
state.SetField( -1, "ImDrawFlags_RoundCornersTop", ImDrawFlags_RoundCornersTop );
state.SetField( -1, "ImDrawFlags_RoundCornersBottom", ImDrawFlags_RoundCornersBottom );
state.SetField( -1, "ImDrawFlags_RoundCornersLeft", ImDrawFlags_RoundCornersLeft );
state.SetField( -1, "ImDrawFlags_RoundCornersRight", ImDrawFlags_RoundCornersRight );
state.SetField( -1, "ImDrawFlags_RoundCornersAll", ImDrawFlags_RoundCornersAll );
state.SetField( -1, "ImDrawFlags_RoundCornersDefault_", ImDrawFlags_RoundCornersDefault_ );
state.SetField( -1, "ImDrawFlags_RoundCornersMask_", ImDrawFlags_RoundCornersMask_ );
state.SetField( -1, "ImDrawListFlags_None", ImDrawListFlags_None );
state.SetField( -1, "ImDrawListFlags_AntiAliasedLines", ImDrawListFlags_AntiAliasedLines );
state.SetField( -1, "ImDrawListFlags_AntiAliasedLinesUseTex", ImDrawListFlags_AntiAliasedLinesUseTex );
state.SetField( -1, "ImDrawListFlags_AntiAliasedFill", ImDrawListFlags_AntiAliasedFill );
state.SetField( -1, "ImDrawListFlags_AllowVtxOffset", ImDrawListFlags_AllowVtxOffset );
state.SetField( -1, "ImFontAtlasFlags_None", ImFontAtlasFlags_None );
state.SetField( -1, "ImFontAtlasFlags_NoPowerOfTwoHeight", ImFontAtlasFlags_NoPowerOfTwoHeight );
state.SetField( -1, "ImFontAtlasFlags_NoMouseCursors", ImFontAtlasFlags_NoMouseCursors );
state.SetField( -1, "ImFontAtlasFlags_NoBakedLines", ImFontAtlasFlags_NoBakedLines );
state.SetField( -1, "ViewportFlags_None", ImGuiViewportFlags_None );
state.SetField( -1, "ViewportFlags_IsPlatformWindow", ImGuiViewportFlags_IsPlatformWindow );
state.SetField( -1, "ViewportFlags_IsPlatformMonitor", ImGuiViewportFlags_IsPlatformMonitor );
state.SetField( -1, "ViewportFlags_OwnedByApp", ImGuiViewportFlags_OwnedByApp );
state.SetField( -1, "ViewportFlags_NoDecoration", ImGuiViewportFlags_NoDecoration );
state.SetField( -1, "ViewportFlags_NoTaskBarIcon", ImGuiViewportFlags_NoTaskBarIcon );
state.SetField( -1, "ViewportFlags_NoFocusOnAppearing", ImGuiViewportFlags_NoFocusOnAppearing );
state.SetField( -1, "ViewportFlags_NoFocusOnClick", ImGuiViewportFlags_NoFocusOnClick );
state.SetField( -1, "ViewportFlags_NoInputs", ImGuiViewportFlags_NoInputs );
state.SetField( -1, "ViewportFlags_NoRendererClear", ImGuiViewportFlags_NoRendererClear );
state.SetField( -1, "ViewportFlags_TopMost", ImGuiViewportFlags_TopMost );
state.SetField( -1, "ViewportFlags_Minimized", ImGuiViewportFlags_Minimized );
state.SetField( -1, "ViewportFlags_NoAutoMerge", ImGuiViewportFlags_NoAutoMerge );
state.SetField( -1, "ViewportFlags_CanHostOtherWindows", ImGuiViewportFlags_CanHostOtherWindows );
state.SetField( -1, "ImDrawCornerFlags_None", ImDrawCornerFlags_None );
state.SetField( -1, "ImDrawCornerFlags_TopLeft", ImDrawCornerFlags_TopLeft );
state.SetField( -1, "ImDrawCornerFlags_TopRight", ImDrawCornerFlags_TopRight );
state.SetField( -1, "ImDrawCornerFlags_BotLeft", ImDrawCornerFlags_BotLeft );
state.SetField( -1, "ImDrawCornerFlags_BotRight", ImDrawCornerFlags_BotRight );
state.SetField( -1, "ImDrawCornerFlags_All", ImDrawCornerFlags_All );
state.SetField( -1, "ImDrawCornerFlags_Top", ImDrawCornerFlags_Top );
state.SetField( -1, "ImDrawCornerFlags_Bot", ImDrawCornerFlags_Bot );
state.SetField( -1, "ImDrawCornerFlags_Left", ImDrawCornerFlags_Left );
state.SetField( -1, "ImDrawCornerFlags_Right", ImDrawCornerFlags_Right );
state.SetField( -1, "ModFlags_None", ImGuiModFlags_None );
state.SetField( -1, "ModFlags_Ctrl", ImGuiModFlags_Ctrl );
state.SetField( -1, "ModFlags_Shift", ImGuiModFlags_Shift );
state.SetField( -1, "ModFlags_Alt", ImGuiModFlags_Alt );
state.SetField( -1, "ModFlags_Super", ImGuiModFlags_Super );
*/

//----------------------------------------------------------------//
// unsupported: ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: void DestroyContext(ImGuiContext* ctx = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiContext* GetCurrentContext()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: void SetCurrentContext(ImGuiContext* ctx)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiIO& GetIO()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiStyle& GetStyle()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void NewFrame()
//----------------------------------------------------------------//
IMGUI_FUNCTION( NewFrame )
CALL_FUNCTION_NO_RET( NewFrame )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndFrame()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndFrame )
CALL_FUNCTION_NO_RET( EndFrame )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Render()
//----------------------------------------------------------------//
IMGUI_FUNCTION( Render )
CALL_FUNCTION_NO_RET( Render )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImDrawData* GetDrawData()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void ShowDemoWindow(bool* p_open = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowDemoWindow )
BOOL_POINTER_ARG( p_open )
CALL_FUNCTION_NO_RET( ShowDemoWindow, p_open )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ShowMetricsWindow(bool* p_open = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowMetricsWindow )
BOOL_POINTER_ARG( p_open )
CALL_FUNCTION_NO_RET( ShowMetricsWindow, p_open )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ShowDebugLogWindow(bool* p_open = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowDebugLogWindow )
BOOL_POINTER_ARG( p_open )
CALL_FUNCTION_NO_RET( ShowDebugLogWindow, p_open )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ShowStackToolWindow(bool* p_open = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowStackToolWindow )
BOOL_POINTER_ARG( p_open )
CALL_FUNCTION_NO_RET( ShowStackToolWindow, p_open )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ShowAboutWindow(bool* p_open = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowAboutWindow )
BOOL_POINTER_ARG( p_open )
CALL_FUNCTION_NO_RET( ShowAboutWindow, p_open )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void ShowStyleEditor(ImGuiStyle* ref = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool ShowStyleSelector(const char* label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowStyleSelector )
LABEL_ARG( label )
CALL_FUNCTION( ShowStyleSelector, bool, label )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ShowFontSelector(const char* label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowFontSelector )
LABEL_ARG( label )
CALL_FUNCTION_NO_RET( ShowFontSelector, label )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ShowUserGuide()
//----------------------------------------------------------------//
IMGUI_FUNCTION( ShowUserGuide )
CALL_FUNCTION_NO_RET( ShowUserGuide )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// const char* GetVersion()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetVersion )
CALL_FUNCTION( GetVersion, const char* )
PUSH_STRING( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void StyleColorsDark(ImGuiStyle* dst = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: void StyleColorsLight(ImGuiStyle* dst = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: void StyleColorsClassic(ImGuiStyle* dst = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool Begin(const char* name, bool* p_open = , ImGuiWindowFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Begin )
LABEL_ARG( name )
BOOL_POINTER_ARG( p_open )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( Begin, bool, name, p_open, (ImGuiWindowFlags)flags )
PUSH_BOOL( ret )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void End()
//----------------------------------------------------------------//
IMGUI_FUNCTION( End )
CALL_FUNCTION_NO_RET( End )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginChild(const char* str_id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginChild )
LABEL_ARG( str_id )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
OPTIONAL_BOOL_ARG( border, false )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginChild, bool, str_id, size, border, (ImGuiWindowFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginChild_2 )
UINT_ARG( id )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
OPTIONAL_BOOL_ARG( border, false )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginChild, bool, (ImGuiID)id, size, border, (ImGuiWindowFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndChild()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndChild )
CALL_FUNCTION_NO_RET( EndChild )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsWindowAppearing()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsWindowAppearing )
CALL_FUNCTION( IsWindowAppearing, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsWindowCollapsed()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsWindowCollapsed )
CALL_FUNCTION( IsWindowCollapsed, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsWindowFocused(ImGuiFocusedFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsWindowFocused )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( IsWindowFocused, bool, (ImGuiFocusedFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsWindowHovered(ImGuiHoveredFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsWindowHovered )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( IsWindowHovered, bool, (ImGuiHoveredFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImDrawList* GetWindowDrawList()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// float GetWindowDpiScale()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowDpiScale )
CALL_FUNCTION( GetWindowDpiScale, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetWindowPos()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowPos )
CALL_FUNCTION( GetWindowPos, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetWindowSize()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowSize )
CALL_FUNCTION( GetWindowSize, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetWindowWidth()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowWidth )
CALL_FUNCTION( GetWindowWidth, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetWindowHeight()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowHeight )
CALL_FUNCTION( GetWindowHeight, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiViewport* GetWindowViewport()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowPos )
IM_VEC_2_ARG( pos )
OPTIONAL_INT_ARG( cond, 0 )
OPTIONAL_IM_VEC_2_ARG( pivot, 0, 0 )
CALL_FUNCTION_NO_RET( SetNextWindowPos, pos, (ImGuiCond)cond, pivot )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowSize )
IM_VEC_2_ARG( size )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetNextWindowSize, size, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = , void* custom_callback_data = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowSizeConstraints )
IM_VEC_2_ARG( size_min )
IM_VEC_2_ARG( size_max )
CALLBACK_STUB( custom_callback, ImGuiSizeCallback )
OPTIONAL_VOID_ARG( custom_callback_data, 0 )
CALL_FUNCTION_NO_RET( SetNextWindowSizeConstraints, size_min, size_max, (ImGuiSizeCallback)custom_callback, custom_callback_data )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowContentSize(const ImVec2& size)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowContentSize )
IM_VEC_2_ARG( size )
CALL_FUNCTION_NO_RET( SetNextWindowContentSize, size )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowCollapsed )
BOOL_ARG( collapsed )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetNextWindowCollapsed, collapsed, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowFocus()
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowFocus )
CALL_FUNCTION_NO_RET( SetNextWindowFocus )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowScroll(const ImVec2& scroll)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowScroll )
IM_VEC_2_ARG( scroll )
CALL_FUNCTION_NO_RET( SetNextWindowScroll, scroll )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowBgAlpha(float alpha)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowBgAlpha )
FLOAT_ARG( alpha )
CALL_FUNCTION_NO_RET( SetNextWindowBgAlpha, alpha )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextWindowViewport(ImGuiID viewport_id)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowViewport )
UINT_ARG( viewport_id )
CALL_FUNCTION_NO_RET( SetNextWindowViewport, (ImGuiID)viewport_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowPos )
IM_VEC_2_ARG( pos )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetWindowPos, pos, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowSize(const ImVec2& size, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowSize )
IM_VEC_2_ARG( size )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetWindowSize, size, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowCollapsed )
BOOL_ARG( collapsed )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetWindowCollapsed, collapsed, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowFocus()
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowFocus )
CALL_FUNCTION_NO_RET( SetWindowFocus )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowFontScale(float scale)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowFontScale )
FLOAT_ARG( scale )
CALL_FUNCTION_NO_RET( SetWindowFontScale, scale )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowPos_2 )
LABEL_ARG( name )
IM_VEC_2_ARG( pos )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetWindowPos, name, pos, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowSize_2 )
LABEL_ARG( name )
IM_VEC_2_ARG( size )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetWindowSize, name, size, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowCollapsed_2 )
LABEL_ARG( name )
BOOL_ARG( collapsed )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetWindowCollapsed, name, collapsed, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetWindowFocus(const char* name)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetWindowFocus_2 )
LABEL_ARG( name )
CALL_FUNCTION_NO_RET( SetWindowFocus, name )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetContentRegionAvail()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetContentRegionAvail )
CALL_FUNCTION( GetContentRegionAvail, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetContentRegionMax()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetContentRegionMax )
CALL_FUNCTION( GetContentRegionMax, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetWindowContentRegionMin()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowContentRegionMin )
CALL_FUNCTION( GetWindowContentRegionMin, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetWindowContentRegionMax()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetWindowContentRegionMax )
CALL_FUNCTION( GetWindowContentRegionMax, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetScrollX()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetScrollX )
CALL_FUNCTION( GetScrollX, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetScrollY()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetScrollY )
CALL_FUNCTION( GetScrollY, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetScrollX(float scroll_x)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetScrollX )
FLOAT_ARG( scroll_x )
CALL_FUNCTION_NO_RET( SetScrollX, scroll_x )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetScrollY(float scroll_y)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetScrollY )
FLOAT_ARG( scroll_y )
CALL_FUNCTION_NO_RET( SetScrollY, scroll_y )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetScrollMaxX()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetScrollMaxX )
CALL_FUNCTION( GetScrollMaxX, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetScrollMaxY()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetScrollMaxY )
CALL_FUNCTION( GetScrollMaxY, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetScrollHereX(float center_x_ratio = 0.5f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetScrollHereX )
OPTIONAL_FLOAT_ARG( center_x_ratio, 0.5 )
CALL_FUNCTION_NO_RET( SetScrollHereX, center_x_ratio )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetScrollHereY(float center_y_ratio = 0.5f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetScrollHereY )
OPTIONAL_FLOAT_ARG( center_y_ratio, 0.5 )
CALL_FUNCTION_NO_RET( SetScrollHereY, center_y_ratio )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetScrollFromPosX )
FLOAT_ARG( local_x )
OPTIONAL_FLOAT_ARG( center_x_ratio, 0.5 )
CALL_FUNCTION_NO_RET( SetScrollFromPosX, local_x, center_x_ratio )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetScrollFromPosY )
FLOAT_ARG( local_y )
OPTIONAL_FLOAT_ARG( center_y_ratio, 0.5 )
CALL_FUNCTION_NO_RET( SetScrollFromPosY, local_y, center_y_ratio )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void PushFont(ImFont* font)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void PopFont()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopFont )
CALL_FUNCTION_NO_RET( PopFont )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushStyleColor(ImGuiCol idx, ImU32 col)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushStyleColor )
INT_ARG( idx )
UINT_ARG( col )
CALL_FUNCTION_NO_RET( PushStyleColor, (ImGuiCol)idx, (ImU32)col )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushStyleColor(ImGuiCol idx, const ImVec4& col)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushStyleColor_2 )
INT_ARG( idx )
IM_VEC_4_ARG( col )
CALL_FUNCTION_NO_RET( PushStyleColor, (ImGuiCol)idx, col )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopStyleColor(int count = 1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopStyleColor )
OPTIONAL_INT_ARG( count, 1 )
CALL_FUNCTION_NO_RET( PopStyleColor, count )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushStyleVar(ImGuiStyleVar idx, float val)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushStyleVar )
INT_ARG( idx )
FLOAT_ARG( val )
CALL_FUNCTION_NO_RET( PushStyleVar, (ImGuiStyleVar)idx, val )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushStyleVar_2 )
INT_ARG( idx )
IM_VEC_2_ARG( val )
CALL_FUNCTION_NO_RET( PushStyleVar, (ImGuiStyleVar)idx, val )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopStyleVar(int count = 1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopStyleVar )
OPTIONAL_INT_ARG( count, 1 )
CALL_FUNCTION_NO_RET( PopStyleVar, count )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushTabStop(bool tab_stop)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushTabStop )
BOOL_ARG( tab_stop )
CALL_FUNCTION_NO_RET( PushTabStop, tab_stop )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopTabStop()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopTabStop )
CALL_FUNCTION_NO_RET( PopTabStop )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushButtonRepeat(bool repeat)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushButtonRepeat )
BOOL_ARG( repeat )
CALL_FUNCTION_NO_RET( PushButtonRepeat, repeat )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopButtonRepeat()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopButtonRepeat )
CALL_FUNCTION_NO_RET( PopButtonRepeat )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushItemWidth(float item_width)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushItemWidth )
FLOAT_ARG( item_width )
CALL_FUNCTION_NO_RET( PushItemWidth, item_width )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopItemWidth()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopItemWidth )
CALL_FUNCTION_NO_RET( PopItemWidth )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextItemWidth(float item_width)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextItemWidth )
FLOAT_ARG( item_width )
CALL_FUNCTION_NO_RET( SetNextItemWidth, item_width )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float CalcItemWidth()
//----------------------------------------------------------------//
IMGUI_FUNCTION( CalcItemWidth )
CALL_FUNCTION( CalcItemWidth, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushTextWrapPos(float wrap_local_pos_x = 0.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushTextWrapPos )
OPTIONAL_FLOAT_ARG( wrap_local_pos_x, 0 )
CALL_FUNCTION_NO_RET( PushTextWrapPos, wrap_local_pos_x )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopTextWrapPos()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopTextWrapPos )
CALL_FUNCTION_NO_RET( PopTextWrapPos )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImFont* GetFont()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// float GetFontSize()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetFontSize )
CALL_FUNCTION( GetFontSize, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetFontTexUvWhitePixel()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetFontTexUvWhitePixel )
CALL_FUNCTION( GetFontTexUvWhitePixel, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImU32 GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImU32 GetColorU32(const ImVec4& col)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImU32 GetColorU32(ImU32 col)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// const ImVec4& GetStyleColorVec4(ImGuiCol idx)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetStyleColorVec4 )
INT_ARG( idx )
CALL_FUNCTION( GetStyleColorVec4, ImVec4, (ImGuiCol)idx )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
PUSH_TABLE_NUMBER( ret.z )
SET_TABLE_FIELD( "z" )
PUSH_TABLE_NUMBER( ret.w )
SET_TABLE_FIELD( "w" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Separator()
//----------------------------------------------------------------//
IMGUI_FUNCTION( Separator )
CALL_FUNCTION_NO_RET( Separator )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SameLine(float offset_from_start_x = 0.0f, float spacing = -1.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SameLine )
OPTIONAL_FLOAT_ARG( offset_from_start_x, 0 )
OPTIONAL_FLOAT_ARG( spacing, -1 )
CALL_FUNCTION_NO_RET( SameLine, offset_from_start_x, spacing )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void NewLine()
//----------------------------------------------------------------//
IMGUI_FUNCTION( NewLine )
CALL_FUNCTION_NO_RET( NewLine )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Spacing()
//----------------------------------------------------------------//
IMGUI_FUNCTION( Spacing )
CALL_FUNCTION_NO_RET( Spacing )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Dummy(const ImVec2& size)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Dummy )
IM_VEC_2_ARG( size )
CALL_FUNCTION_NO_RET( Dummy, size )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Indent(float indent_w = 0.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Indent )
OPTIONAL_FLOAT_ARG( indent_w, 0 )
CALL_FUNCTION_NO_RET( Indent, indent_w )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Unindent(float indent_w = 0.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Unindent )
OPTIONAL_FLOAT_ARG( indent_w, 0 )
CALL_FUNCTION_NO_RET( Unindent, indent_w )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void BeginGroup()
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginGroup )
CALL_FUNCTION_NO_RET( BeginGroup )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndGroup()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndGroup )
CALL_FUNCTION_NO_RET( EndGroup )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetCursorPos()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetCursorPos )
CALL_FUNCTION( GetCursorPos, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetCursorPosX()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetCursorPosX )
CALL_FUNCTION( GetCursorPosX, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetCursorPosY()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetCursorPosY )
CALL_FUNCTION( GetCursorPosY, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetCursorPos(const ImVec2& local_pos)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetCursorPos )
IM_VEC_2_ARG( local_pos )
CALL_FUNCTION_NO_RET( SetCursorPos, local_pos )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetCursorPosX(float local_x)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetCursorPosX )
FLOAT_ARG( local_x )
CALL_FUNCTION_NO_RET( SetCursorPosX, local_x )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetCursorPosY(float local_y)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetCursorPosY )
FLOAT_ARG( local_y )
CALL_FUNCTION_NO_RET( SetCursorPosY, local_y )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetCursorStartPos()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetCursorStartPos )
CALL_FUNCTION( GetCursorStartPos, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetCursorScreenPos()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetCursorScreenPos )
CALL_FUNCTION( GetCursorScreenPos, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetCursorScreenPos(const ImVec2& pos)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetCursorScreenPos )
IM_VEC_2_ARG( pos )
CALL_FUNCTION_NO_RET( SetCursorScreenPos, pos )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void AlignTextToFramePadding()
//----------------------------------------------------------------//
IMGUI_FUNCTION( AlignTextToFramePadding )
CALL_FUNCTION_NO_RET( AlignTextToFramePadding )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetTextLineHeight()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetTextLineHeight )
CALL_FUNCTION( GetTextLineHeight, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetTextLineHeightWithSpacing()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetTextLineHeightWithSpacing )
CALL_FUNCTION( GetTextLineHeightWithSpacing, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetFrameHeight()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetFrameHeight )
CALL_FUNCTION( GetFrameHeight, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetFrameHeightWithSpacing()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetFrameHeightWithSpacing )
CALL_FUNCTION( GetFrameHeightWithSpacing, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushID(const char* str_id)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushID )
LABEL_ARG( str_id )
CALL_FUNCTION_NO_RET( PushID, str_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushID(const char* str_id_begin, const char* str_id_end)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushID_2 )
LABEL_ARG( str_id_begin )
LABEL_ARG( str_id_end )
CALL_FUNCTION_NO_RET( PushID, str_id_begin, str_id_end )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushID(const void* ptr_id)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushID_3 )
VOID_ARG( ptr_id )
CALL_FUNCTION_NO_RET( PushID, ptr_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushID(int int_id)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushID_4 )
INT_ARG( int_id )
CALL_FUNCTION_NO_RET( PushID, int_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopID()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopID )
CALL_FUNCTION_NO_RET( PopID )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiID GetID(const char* str_id)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiID GetID(const char* str_id_begin, const char* str_id_end)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiID GetID(const void* ptr_id)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void TextUnformatted(const char* text, const char* text_end = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( TextUnformatted )
LABEL_ARG( text )
OPTIONAL_LABEL_ARG( text_end, "" )
CALL_FUNCTION_NO_RET( TextUnformatted, text, text_end )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Text(const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Text )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( Text, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void TextV(const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void TextColored(const ImVec4& col, const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TextColored )
IM_VEC_4_ARG( col )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( TextColored, col, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void TextColoredV(const ImVec4& col, const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void TextDisabled(const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TextDisabled )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( TextDisabled, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void TextDisabledV(const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void TextWrapped(const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TextWrapped )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( TextWrapped, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void TextWrappedV(const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void LabelText(const char* label, const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( LabelText )
LABEL_ARG( label )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( LabelText, label, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void LabelTextV(const char* label, const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void BulletText(const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BulletText )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( BulletText, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void BulletTextV(const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void SeparatorText(const char* label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SeparatorText )
LABEL_ARG( label )
CALL_FUNCTION_NO_RET( SeparatorText, label )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool Button(const char* label, const ImVec2& size = ImVec2(0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( Button )
LABEL_ARG( label )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
CALL_FUNCTION( Button, bool, label, size )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SmallButton(const char* label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SmallButton )
LABEL_ARG( label )
CALL_FUNCTION( SmallButton, bool, label )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InvisibleButton )
LABEL_ARG( str_id )
IM_VEC_2_ARG( size )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InvisibleButton, bool, str_id, size, (ImGuiButtonFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ArrowButton(const char* str_id, ImGuiDir dir)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ArrowButton )
LABEL_ARG( str_id )
INT_ARG( dir )
CALL_FUNCTION( ArrowButton, bool, str_id, (ImGuiDir)dir )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool Checkbox(const char* label, bool* v)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Checkbox )
LABEL_ARG( label )
BOOL_POINTER_ARG( v )
CALL_FUNCTION( Checkbox, bool, label, v )
PUSH_BOOL( ret )
END_BOOL_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool CheckboxFlags(const char* label, int* flags, int flags_value)
//----------------------------------------------------------------//
IMGUI_FUNCTION( CheckboxFlags )
LABEL_ARG( label )
INT_POINTER_ARG( flags )
INT_ARG( flags_value )
CALL_FUNCTION( CheckboxFlags, bool, label, flags, flags_value )
PUSH_BOOL( ret )
END_INT_POINTER( flags )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
//----------------------------------------------------------------//
IMGUI_FUNCTION( CheckboxFlags_2 )
LABEL_ARG( label )
UINT_POINTER_ARG( flags )
UINT_ARG( flags_value )
CALL_FUNCTION( CheckboxFlags, bool, label, flags, flags_value )
PUSH_BOOL( ret )
END_UINT_POINTER( flags )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool RadioButton(const char* label, bool active)
//----------------------------------------------------------------//
IMGUI_FUNCTION( RadioButton )
LABEL_ARG( label )
BOOL_ARG( active )
CALL_FUNCTION( RadioButton, bool, label, active )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool RadioButton(const char* label, int* v, int v_button)
//----------------------------------------------------------------//
IMGUI_FUNCTION( RadioButton_2 )
LABEL_ARG( label )
INT_POINTER_ARG( v )
INT_ARG( v_button )
CALL_FUNCTION( RadioButton, bool, label, v, v_button )
PUSH_BOOL( ret )
END_INT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN,0), const char* overlay = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ProgressBar )
FLOAT_ARG( fraction )
OPTIONAL_IM_VEC_2_ARG( size_arg, -3.4028235E+38, 0 )
OPTIONAL_LABEL_ARG( overlay, "" )
CALL_FUNCTION_NO_RET( ProgressBar, fraction, size_arg, overlay )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Bullet()
//----------------------------------------------------------------//
IMGUI_FUNCTION( Bullet )
CALL_FUNCTION_NO_RET( Bullet )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( Image )
IM_TEXTURE_ID_ARG( user_texture_id )
IM_VEC_2_ARG( size )
OPTIONAL_IM_VEC_2_ARG( uv0, 0, 0 )
OPTIONAL_IM_VEC_2_ARG( uv1, 1, 1 )
OPTIONAL_IM_VEC_4_ARG( tint_col, 1, 1, 1, 1 )
OPTIONAL_IM_VEC_4_ARG( border_col, 0, 0, 0, 0 )
CALL_FUNCTION_NO_RET( Image, (ImTextureID)user_texture_id, size, uv0, uv1, tint_col, border_col )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1))
//----------------------------------------------------------------//
IMGUI_FUNCTION( ImageButton )
LABEL_ARG( str_id )
IM_TEXTURE_ID_ARG( user_texture_id )
IM_VEC_2_ARG( size )
OPTIONAL_IM_VEC_2_ARG( uv0, 0, 0 )
OPTIONAL_IM_VEC_2_ARG( uv1, 1, 1 )
OPTIONAL_IM_VEC_4_ARG( bg_col, 0, 0, 0, 0 )
OPTIONAL_IM_VEC_4_ARG( tint_col, 1, 1, 1, 1 )
CALL_FUNCTION( ImageButton, bool, str_id, (ImTextureID)user_texture_id, size, uv0, uv1, bg_col, tint_col )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginCombo )
LABEL_ARG( label )
LABEL_ARG( preview_value )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginCombo, bool, label, preview_value, (ImGuiComboFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndCombo()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndCombo )
CALL_FUNCTION_NO_RET( EndCombo )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool Combo(const char* label, int* current_item, const char*[-1] items, int items_count, int popup_max_height_in_items = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Combo )
LABEL_ARG( label )
INT_POINTER_ARG( current_item )
LABEL_ARRAY_TABLE_ARG( items )
INT_ARG( items_count )
OPTIONAL_INT_ARG( popup_max_height_in_items, -1 )
CALL_FUNCTION( Combo, bool, label, current_item, items, items_count, popup_max_height_in_items )
PUSH_BOOL( ret )
END_INT_POINTER( current_item )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Combo_2 )
LABEL_ARG( label )
INT_POINTER_ARG( current_item )
LABEL_ARG( items_separated_by_zeros )
OPTIONAL_INT_ARG( popup_max_height_in_items, -1 )
CALL_FUNCTION( Combo, bool, label, current_item, items_separated_by_zeros, popup_max_height_in_items )
PUSH_BOOL( ret )
END_INT_POINTER( current_item )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: bool Combo(const char* label, int* current_item, bool (*)(const char* label, int* current_item, bool (*)(void* data, int idx, const char** out_text)* items_getter, void* data, int items_count, int popup_max_height_in_items)* items_getter, void* data, int items_count, int popup_max_height_in_items = -1)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragFloat )
LABEL_ARG( label )
FLOAT_POINTER_ARG( v )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_FLOAT_ARG( v_min, 0 )
OPTIONAL_FLOAT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragFloat, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_FLOAT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragFloat2(const char* label, float[2] v = 2, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragFloat2 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 2 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_FLOAT_ARG( v_min, 0 )
OPTIONAL_FLOAT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragFloat2, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragFloat3(const char* label, float[3] v = 3, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragFloat3 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 3 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARRAY_ARG( v, 2 )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_FLOAT_ARG( v_min, 0 )
OPTIONAL_FLOAT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragFloat3, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragFloat4(const char* label, float[4] v = 4, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragFloat4 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 4 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARRAY_ARG( v, 2 )
FLOAT_ARRAY_ARG( v, 3 )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_FLOAT_ARG( v_min, 0 )
OPTIONAL_FLOAT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragFloat4, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
PUSH_NUMBER( v[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragFloatRange2 )
LABEL_ARG( label )
FLOAT_POINTER_ARG( v_current_min )
FLOAT_POINTER_ARG( v_current_max )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_FLOAT_ARG( v_min, 0 )
OPTIONAL_FLOAT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_LABEL_ARG( format_max, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragFloatRange2, bool, label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_FLOAT_POINTER( v_current_min )
END_FLOAT_POINTER( v_current_max )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragInt )
LABEL_ARG( label )
INT_POINTER_ARG( v )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_INT_ARG( v_min, 0 )
OPTIONAL_INT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragInt, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_INT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragInt2(const char* label, int[2] v = 2, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragInt2 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 2 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_INT_ARG( v_min, 0 )
OPTIONAL_INT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragInt2, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragInt3(const char* label, int[3] v = 3, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragInt3 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 3 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARRAY_ARG( v, 2 )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_INT_ARG( v_min, 0 )
OPTIONAL_INT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragInt3, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragInt4(const char* label, int[4] v = 4, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragInt4 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 4 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARRAY_ARG( v, 2 )
INT_ARRAY_ARG( v, 3 )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_INT_ARG( v_min, 0 )
OPTIONAL_INT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragInt4, bool, label, v, v_speed, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
PUSH_NUMBER( v[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragIntRange2 )
LABEL_ARG( label )
INT_POINTER_ARG( v_current_min )
INT_POINTER_ARG( v_current_max )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_INT_ARG( v_min, 0 )
OPTIONAL_INT_ARG( v_max, 0 )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_LABEL_ARG( format_max, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragIntRange2, bool, label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_INT_POINTER( v_current_min )
END_INT_POINTER( v_current_max )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed = 1.0f, const void* p_min = , const void* p_max = , const char* format = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragScalar )
LABEL_ARG( label )
INT_ARG( data_type )
VOID_ARG( p_data )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_VOID_ARG( p_min, 0 )
OPTIONAL_VOID_ARG( p_max, 0 )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragScalar, bool, label, (ImGuiDataType)data_type, p_data, v_speed, p_min, p_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed = 1.0f, const void* p_min = , const void* p_max = , const char* format = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DragScalarN )
LABEL_ARG( label )
INT_ARG( data_type )
VOID_ARG( p_data )
INT_ARG( components )
OPTIONAL_FLOAT_ARG( v_speed, 1 )
OPTIONAL_VOID_ARG( p_min, 0 )
OPTIONAL_VOID_ARG( p_max, 0 )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( DragScalarN, bool, label, (ImGuiDataType)data_type, p_data, components, v_speed, p_min, p_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderFloat )
LABEL_ARG( label )
FLOAT_POINTER_ARG( v )
FLOAT_ARG( v_min )
FLOAT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderFloat, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_FLOAT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderFloat2(const char* label, float[2] v = 2, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderFloat2 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 2 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARG( v_min )
FLOAT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderFloat2, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderFloat3(const char* label, float[3] v = 3, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderFloat3 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 3 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARRAY_ARG( v, 2 )
FLOAT_ARG( v_min )
FLOAT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderFloat3, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderFloat4(const char* label, float[4] v = 4, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderFloat4 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 4 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARRAY_ARG( v, 2 )
FLOAT_ARRAY_ARG( v, 3 )
FLOAT_ARG( v_min )
FLOAT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderFloat4, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
PUSH_NUMBER( v[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderAngle )
LABEL_ARG( label )
FLOAT_POINTER_ARG( v_rad )
OPTIONAL_FLOAT_ARG( v_degrees_min, -360 )
OPTIONAL_FLOAT_ARG( v_degrees_max, 360 )
OPTIONAL_LABEL_ARG( format, "%.0f deg" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderAngle, bool, label, v_rad, v_degrees_min, v_degrees_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_FLOAT_POINTER( v_rad )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderInt )
LABEL_ARG( label )
INT_POINTER_ARG( v )
INT_ARG( v_min )
INT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderInt, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_INT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderInt2(const char* label, int[2] v = 2, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderInt2 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 2 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARG( v_min )
INT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderInt2, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderInt3(const char* label, int[3] v = 3, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderInt3 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 3 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARRAY_ARG( v, 2 )
INT_ARG( v_min )
INT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderInt3, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderInt4(const char* label, int[4] v = 4, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderInt4 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 4 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARRAY_ARG( v, 2 )
INT_ARRAY_ARG( v, 3 )
INT_ARG( v_min )
INT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderInt4, bool, label, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
PUSH_NUMBER( v[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderScalar )
LABEL_ARG( label )
INT_ARG( data_type )
VOID_ARG( p_data )
VOID_ARG( p_min )
VOID_ARG( p_max )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderScalar, bool, label, (ImGuiDataType)data_type, p_data, p_min, p_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SliderScalarN )
LABEL_ARG( label )
INT_ARG( data_type )
VOID_ARG( p_data )
INT_ARG( components )
VOID_ARG( p_min )
VOID_ARG( p_max )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( SliderScalarN, bool, label, (ImGuiDataType)data_type, p_data, components, p_min, p_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( VSliderFloat )
LABEL_ARG( label )
IM_VEC_2_ARG( size )
FLOAT_POINTER_ARG( v )
FLOAT_ARG( v_min )
FLOAT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( VSliderFloat, bool, label, size, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_FLOAT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( VSliderInt )
LABEL_ARG( label )
IM_VEC_2_ARG( size )
INT_POINTER_ARG( v )
INT_ARG( v_min )
INT_ARG( v_max )
OPTIONAL_LABEL_ARG( format, "%d" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( VSliderInt, bool, label, size, v, v_min, v_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_INT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = , ImGuiSliderFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( VSliderScalar )
LABEL_ARG( label )
IM_VEC_2_ARG( size )
INT_ARG( data_type )
VOID_ARG( p_data )
VOID_ARG( p_min )
VOID_ARG( p_max )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( VSliderScalar, bool, label, size, (ImGuiDataType)data_type, p_data, p_min, p_max, format, (ImGuiSliderFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = , void* user_data = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputText )
LABEL_ARG( label )
IOTEXT_ARG( buf )
UINT_ARG( buf_size )
OPTIONAL_INT_ARG( flags, 0 )
CALLBACK_STUB( callback, ImGuiInputTextCallback )
OPTIONAL_VOID_ARG( user_data, 0 )
CALL_FUNCTION( InputText, bool, label, buf, (size_t)buf_size, (ImGuiInputTextFlags)flags, (ImGuiInputTextCallback)callback, user_data )
PUSH_BOOL( ret )
END_IOTEXT( buf )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0,0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = , void* user_data = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputTextMultiline )
LABEL_ARG( label )
IOTEXT_ARG( buf )
UINT_ARG( buf_size )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
OPTIONAL_INT_ARG( flags, 0 )
CALLBACK_STUB( callback, ImGuiInputTextCallback )
OPTIONAL_VOID_ARG( user_data, 0 )
CALL_FUNCTION( InputTextMultiline, bool, label, buf, (size_t)buf_size, size, (ImGuiInputTextFlags)flags, (ImGuiInputTextCallback)callback, user_data )
PUSH_BOOL( ret )
END_IOTEXT( buf )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = , void* user_data = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputTextWithHint )
LABEL_ARG( label )
LABEL_ARG( hint )
IOTEXT_ARG( buf )
UINT_ARG( buf_size )
OPTIONAL_INT_ARG( flags, 0 )
CALLBACK_STUB( callback, ImGuiInputTextCallback )
OPTIONAL_VOID_ARG( user_data, 0 )
CALL_FUNCTION( InputTextWithHint, bool, label, hint, buf, (size_t)buf_size, (ImGuiInputTextFlags)flags, (ImGuiInputTextCallback)callback, user_data )
PUSH_BOOL( ret )
END_IOTEXT( buf )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputFloat )
LABEL_ARG( label )
FLOAT_POINTER_ARG( v )
OPTIONAL_FLOAT_ARG( step, 0 )
OPTIONAL_FLOAT_ARG( step_fast, 0 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputFloat, bool, label, v, step, step_fast, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
END_FLOAT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputFloat2(const char* label, float[2] v = 2, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputFloat2 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 2 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputFloat2, bool, label, v, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputFloat3(const char* label, float[3] v = 3, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputFloat3 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 3 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARRAY_ARG( v, 2 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputFloat3, bool, label, v, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputFloat4(const char* label, float[4] v = 4, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputFloat4 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( v, 4 )
FLOAT_ARRAY_ARG( v, 0 )
FLOAT_ARRAY_ARG( v, 1 )
FLOAT_ARRAY_ARG( v, 2 )
FLOAT_ARRAY_ARG( v, 3 )
OPTIONAL_LABEL_ARG( format, "%.3f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputFloat4, bool, label, v, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
PUSH_NUMBER( v[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputInt )
LABEL_ARG( label )
INT_POINTER_ARG( v )
OPTIONAL_INT_ARG( step, 1 )
OPTIONAL_INT_ARG( step_fast, 100 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputInt, bool, label, v, step, step_fast, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
END_INT_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputInt2(const char* label, int[2] v = 2, ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputInt2 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 2 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputInt2, bool, label, v, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputInt3(const char* label, int[3] v = 3, ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputInt3 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 3 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARRAY_ARG( v, 2 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputInt3, bool, label, v, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputInt4(const char* label, int[4] v = 4, ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputInt4 )
LABEL_ARG( label )
INT_ARRAY_DEF( v, 4 )
INT_ARRAY_ARG( v, 0 )
INT_ARRAY_ARG( v, 1 )
INT_ARRAY_ARG( v, 2 )
INT_ARRAY_ARG( v, 3 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputInt4, bool, label, v, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( v[ 0 ] )
PUSH_NUMBER( v[ 1 ] )
PUSH_NUMBER( v[ 2 ] )
PUSH_NUMBER( v[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputDouble )
LABEL_ARG( label )
NUMBER_POINTER_ARG( v )
OPTIONAL_NUMBER_ARG( step, 0 )
OPTIONAL_NUMBER_ARG( step_fast, 0 )
OPTIONAL_LABEL_ARG( format, "%.6f" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputDouble, bool, label, v, step, step_fast, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
END_NUMBER_POINTER( v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = , const void* p_step_fast = , const char* format = , ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputScalar )
LABEL_ARG( label )
INT_ARG( data_type )
VOID_ARG( p_data )
OPTIONAL_VOID_ARG( p_step, 0 )
OPTIONAL_VOID_ARG( p_step_fast, 0 )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputScalar, bool, label, (ImGuiDataType)data_type, p_data, p_step, p_step_fast, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = , const void* p_step_fast = , const char* format = , ImGuiInputTextFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( InputScalarN )
LABEL_ARG( label )
INT_ARG( data_type )
VOID_ARG( p_data )
INT_ARG( components )
OPTIONAL_VOID_ARG( p_step, 0 )
OPTIONAL_VOID_ARG( p_step_fast, 0 )
OPTIONAL_LABEL_ARG( format, "" )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( InputScalarN, bool, label, (ImGuiDataType)data_type, p_data, components, p_step, p_step_fast, format, (ImGuiInputTextFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ColorEdit3(const char* label, float[3] col = 3, ImGuiColorEditFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorEdit3 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( col, 3 )
FLOAT_ARRAY_ARG( col, 0 )
FLOAT_ARRAY_ARG( col, 1 )
FLOAT_ARRAY_ARG( col, 2 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( ColorEdit3, bool, label, col, (ImGuiColorEditFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( col[ 0 ] )
PUSH_NUMBER( col[ 1 ] )
PUSH_NUMBER( col[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ColorEdit4(const char* label, float[4] col = 4, ImGuiColorEditFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorEdit4 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( col, 4 )
FLOAT_ARRAY_ARG( col, 0 )
FLOAT_ARRAY_ARG( col, 1 )
FLOAT_ARRAY_ARG( col, 2 )
FLOAT_ARRAY_ARG( col, 3 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( ColorEdit4, bool, label, col, (ImGuiColorEditFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( col[ 0 ] )
PUSH_NUMBER( col[ 1 ] )
PUSH_NUMBER( col[ 2 ] )
PUSH_NUMBER( col[ 3 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ColorPicker3(const char* label, float[3] col = 3, ImGuiColorEditFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorPicker3 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( col, 3 )
FLOAT_ARRAY_ARG( col, 0 )
FLOAT_ARRAY_ARG( col, 1 )
FLOAT_ARRAY_ARG( col, 2 )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( ColorPicker3, bool, label, col, (ImGuiColorEditFlags)flags )
PUSH_BOOL( ret )
PUSH_NUMBER( col[ 0 ] )
PUSH_NUMBER( col[ 1 ] )
PUSH_NUMBER( col[ 2 ] )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ColorPicker4(const char* label, float[4] col = 4, ImGuiColorEditFlags flags = 0, const float* ref_col = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorPicker4 )
LABEL_ARG( label )
FLOAT_ARRAY_DEF( col, 4 )
FLOAT_ARRAY_ARG( col, 0 )
FLOAT_ARRAY_ARG( col, 1 )
FLOAT_ARRAY_ARG( col, 2 )
FLOAT_ARRAY_ARG( col, 3 )
OPTIONAL_INT_ARG( flags, 0 )
FLOAT_POINTER_ARG( ref_col )
CALL_FUNCTION( ColorPicker4, bool, label, col, (ImGuiColorEditFlags)flags, ref_col )
PUSH_BOOL( ret )
PUSH_NUMBER( col[ 0 ] )
PUSH_NUMBER( col[ 1 ] )
PUSH_NUMBER( col[ 2 ] )
PUSH_NUMBER( col[ 3 ] )
END_FLOAT_POINTER( ref_col )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, const ImVec2& size = ImVec2(0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorButton )
LABEL_ARG( desc_id )
IM_VEC_4_ARG( col )
OPTIONAL_INT_ARG( flags, 0 )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
CALL_FUNCTION( ColorButton, bool, desc_id, col, (ImGuiColorEditFlags)flags, size )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetColorEditOptions(ImGuiColorEditFlags flags)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetColorEditOptions )
INT_ARG( flags )
CALL_FUNCTION_NO_RET( SetColorEditOptions, (ImGuiColorEditFlags)flags )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TreeNode(const char* label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreeNode )
LABEL_ARG( label )
CALL_FUNCTION( TreeNode, bool, label )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TreeNode(const char* str_id, const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreeNode_2 )
LABEL_ARG( str_id )
LABEL_ARG( fmt )
CALL_FUNCTION( TreeNode, bool, str_id, fmt )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TreeNode(const void* ptr_id, const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreeNode_3 )
VOID_ARG( ptr_id )
LABEL_ARG( fmt )
CALL_FUNCTION( TreeNode, bool, ptr_id, fmt )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: bool TreeNodeV(const char* str_id, const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: bool TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreeNodeEx )
LABEL_ARG( label )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( TreeNodeEx, bool, label, (ImGuiTreeNodeFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreeNodeEx_2 )
LABEL_ARG( str_id )
INT_ARG( flags )
LABEL_ARG( fmt )
CALL_FUNCTION( TreeNodeEx, bool, str_id, (ImGuiTreeNodeFlags)flags, fmt )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreeNodeEx_3 )
VOID_ARG( ptr_id )
INT_ARG( flags )
LABEL_ARG( fmt )
CALL_FUNCTION( TreeNodeEx, bool, ptr_id, (ImGuiTreeNodeFlags)flags, fmt )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: bool TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: bool TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void TreePush(const char* str_id)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreePush )
LABEL_ARG( str_id )
CALL_FUNCTION_NO_RET( TreePush, str_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TreePush(const void* ptr_id)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreePush_2 )
VOID_ARG( ptr_id )
CALL_FUNCTION_NO_RET( TreePush, ptr_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TreePop()
//----------------------------------------------------------------//
IMGUI_FUNCTION( TreePop )
CALL_FUNCTION_NO_RET( TreePop )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetTreeNodeToLabelSpacing()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetTreeNodeToLabelSpacing )
CALL_FUNCTION( GetTreeNodeToLabelSpacing, float )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( CollapsingHeader )
LABEL_ARG( label )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( CollapsingHeader, bool, label, (ImGuiTreeNodeFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( CollapsingHeader_2 )
LABEL_ARG( label )
BOOL_POINTER_ARG( p_visible )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( CollapsingHeader, bool, label, p_visible, (ImGuiTreeNodeFlags)flags )
PUSH_BOOL( ret )
END_BOOL_POINTER( p_visible )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextItemOpen(bool is_open, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextItemOpen )
BOOL_ARG( is_open )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetNextItemOpen, is_open, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( Selectable )
LABEL_ARG( label )
OPTIONAL_BOOL_ARG( selected, false )
OPTIONAL_INT_ARG( flags, 0 )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
CALL_FUNCTION( Selectable, bool, label, selected, (ImGuiSelectableFlags)flags, size )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( Selectable_2 )
LABEL_ARG( label )
BOOL_POINTER_ARG( p_selected )
OPTIONAL_INT_ARG( flags, 0 )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
CALL_FUNCTION( Selectable, bool, label, p_selected, (ImGuiSelectableFlags)flags, size )
PUSH_BOOL( ret )
END_BOOL_POINTER( p_selected )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginListBox(const char* label, const ImVec2& size = ImVec2(0,0))
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginListBox )
LABEL_ARG( label )
OPTIONAL_IM_VEC_2_ARG( size, 0, 0 )
CALL_FUNCTION( BeginListBox, bool, label, size )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndListBox()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndListBox )
CALL_FUNCTION_NO_RET( EndListBox )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: bool ListBox(const char* label, int* current_item, const const char*[-1] items, int items_count, int height_in_items = -1)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: bool ListBox(const char* label, int* current_item, bool (*)(const char* label, int* current_item, bool (*)(void* data, int idx, const char** out_text)* items_getter, void* data, int items_count, int height_in_items)* items_getter, void* data, int items_count, int height_in_items = -1)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = , float scale_min = , float scale_max = , ImVec2 graph_size = =ImVec2(0,0), int stride = sizeof(float))
//----------------------------------------------------------------//
IMGUI_FUNCTION( PlotLines )
LABEL_ARG( label )
FLOAT_POINTER_ARG( values )
INT_ARG( values_count )
OPTIONAL_INT_ARG( values_offset, 0 )
OPTIONAL_LABEL_ARG( overlay_text, "" )
OPTIONAL_FLOAT_ARG( scale_min, 3.4028234663852886E+38 )
OPTIONAL_FLOAT_ARG( scale_max, 3.4028234663852886E+38 )
IM_VEC_2_ARG( graph_size )
OPTIONAL_INT_ARG( stride, 4 )
CALL_FUNCTION_NO_RET( PlotLines, label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride )
END_FLOAT_POINTER( values )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void PlotLines(const char* label, float (*)(const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)* values_getter, void* data, int values_count, int values_offset = 0, const char* overlay_text = , float scale_min = , float scale_max = , ImVec2 graph_size = =ImVec2(0,0))
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = , float scale_min = , float scale_max = , ImVec2 graph_size = =ImVec2(0,0), int stride = sizeof(float))
//----------------------------------------------------------------//
IMGUI_FUNCTION( PlotHistogram )
LABEL_ARG( label )
FLOAT_POINTER_ARG( values )
INT_ARG( values_count )
OPTIONAL_INT_ARG( values_offset, 0 )
OPTIONAL_LABEL_ARG( overlay_text, "" )
OPTIONAL_FLOAT_ARG( scale_min, 3.4028234663852886E+38 )
OPTIONAL_FLOAT_ARG( scale_max, 3.4028234663852886E+38 )
IM_VEC_2_ARG( graph_size )
OPTIONAL_INT_ARG( stride, 4 )
CALL_FUNCTION_NO_RET( PlotHistogram, label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride )
END_FLOAT_POINTER( values )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void PlotHistogram(const char* label, float (*)(const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)* values_getter, void* data, int values_count, int values_offset = 0, const char* overlay_text = , float scale_min = , float scale_max = , ImVec2 graph_size = =ImVec2(0,0))
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void Value(const char* prefix, bool b)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Value )
LABEL_ARG( prefix )
BOOL_ARG( b )
CALL_FUNCTION_NO_RET( Value, prefix, b )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Value(const char* prefix, int v)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Value_2 )
LABEL_ARG( prefix )
INT_ARG( v )
CALL_FUNCTION_NO_RET( Value, prefix, v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Value(const char* prefix, unsigned int v)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Value_3 )
LABEL_ARG( prefix )
UINT_ARG( v )
CALL_FUNCTION_NO_RET( Value, prefix, v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Value(const char* prefix, float v, const char* float_format = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( Value_4 )
LABEL_ARG( prefix )
FLOAT_ARG( v )
OPTIONAL_LABEL_ARG( float_format, "" )
CALL_FUNCTION_NO_RET( Value, prefix, v, float_format )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginMenuBar()
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginMenuBar )
CALL_FUNCTION( BeginMenuBar, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndMenuBar()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndMenuBar )
CALL_FUNCTION_NO_RET( EndMenuBar )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginMainMenuBar()
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginMainMenuBar )
CALL_FUNCTION( BeginMainMenuBar, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndMainMenuBar()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndMainMenuBar )
CALL_FUNCTION_NO_RET( EndMainMenuBar )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginMenu(const char* label, bool enabled = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginMenu )
LABEL_ARG( label )
OPTIONAL_BOOL_ARG( enabled, true )
CALL_FUNCTION( BeginMenu, bool, label, enabled )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndMenu()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndMenu )
CALL_FUNCTION_NO_RET( EndMenu )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool MenuItem(const char* label, const char* shortcut = , bool selected = false, bool enabled = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( MenuItem )
LABEL_ARG( label )
OPTIONAL_LABEL_ARG( shortcut, "" )
OPTIONAL_BOOL_ARG( selected, false )
OPTIONAL_BOOL_ARG( enabled, true )
CALL_FUNCTION( MenuItem, bool, label, shortcut, selected, enabled )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( MenuItem_2 )
LABEL_ARG( label )
LABEL_ARG( shortcut )
BOOL_POINTER_ARG( p_selected )
OPTIONAL_BOOL_ARG( enabled, true )
CALL_FUNCTION( MenuItem, bool, label, shortcut, p_selected, enabled )
PUSH_BOOL( ret )
END_BOOL_POINTER( p_selected )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginTooltip()
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginTooltip )
CALL_FUNCTION( BeginTooltip, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndTooltip()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndTooltip )
CALL_FUNCTION_NO_RET( EndTooltip )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetTooltip(const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetTooltip )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( SetTooltip, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void SetTooltipV(const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginPopup )
LABEL_ARG( str_id )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginPopup, bool, str_id, (ImGuiWindowFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginPopupModal(const char* name, bool* p_open = , ImGuiWindowFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginPopupModal )
LABEL_ARG( name )
BOOL_POINTER_ARG( p_open )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginPopupModal, bool, name, p_open, (ImGuiWindowFlags)flags )
PUSH_BOOL( ret )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndPopup()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndPopup )
CALL_FUNCTION_NO_RET( EndPopup )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( OpenPopup )
LABEL_ARG( str_id )
OPTIONAL_INT_ARG( popup_flags, 0 )
CALL_FUNCTION_NO_RET( OpenPopup, str_id, (ImGuiPopupFlags)popup_flags )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( OpenPopup_2 )
UINT_ARG( id )
OPTIONAL_INT_ARG( popup_flags, 0 )
CALL_FUNCTION_NO_RET( OpenPopup, (ImGuiID)id, (ImGuiPopupFlags)popup_flags )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void OpenPopupOnItemClick(const char* str_id = , ImGuiPopupFlags popup_flags = 1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( OpenPopupOnItemClick )
OPTIONAL_LABEL_ARG( str_id, "" )
OPTIONAL_INT_ARG( popup_flags, 1 )
CALL_FUNCTION_NO_RET( OpenPopupOnItemClick, str_id, (ImGuiPopupFlags)popup_flags )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void CloseCurrentPopup()
//----------------------------------------------------------------//
IMGUI_FUNCTION( CloseCurrentPopup )
CALL_FUNCTION_NO_RET( CloseCurrentPopup )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginPopupContextItem(const char* str_id = , ImGuiPopupFlags popup_flags = 1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginPopupContextItem )
OPTIONAL_LABEL_ARG( str_id, "" )
OPTIONAL_INT_ARG( popup_flags, 1 )
CALL_FUNCTION( BeginPopupContextItem, bool, str_id, (ImGuiPopupFlags)popup_flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginPopupContextWindow(const char* str_id = , ImGuiPopupFlags popup_flags = 1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginPopupContextWindow )
OPTIONAL_LABEL_ARG( str_id, "" )
OPTIONAL_INT_ARG( popup_flags, 1 )
CALL_FUNCTION( BeginPopupContextWindow, bool, str_id, (ImGuiPopupFlags)popup_flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginPopupContextVoid(const char* str_id = , ImGuiPopupFlags popup_flags = 1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginPopupContextVoid )
OPTIONAL_LABEL_ARG( str_id, "" )
OPTIONAL_INT_ARG( popup_flags, 1 )
CALL_FUNCTION( BeginPopupContextVoid, bool, str_id, (ImGuiPopupFlags)popup_flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsPopupOpen )
LABEL_ARG( str_id )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( IsPopupOpen, bool, str_id, (ImGuiPopupFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f,0.0f), float inner_width = 0.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginTable )
LABEL_ARG( str_id )
INT_ARG( column )
OPTIONAL_INT_ARG( flags, 0 )
OPTIONAL_IM_VEC_2_ARG( outer_size, 0, 0 )
OPTIONAL_FLOAT_ARG( inner_width, 0 )
CALL_FUNCTION( BeginTable, bool, str_id, column, (ImGuiTableFlags)flags, outer_size, inner_width )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndTable()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndTable )
CALL_FUNCTION_NO_RET( EndTable )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableNextRow )
OPTIONAL_INT_ARG( row_flags, 0 )
OPTIONAL_FLOAT_ARG( min_row_height, 0 )
CALL_FUNCTION_NO_RET( TableNextRow, (ImGuiTableRowFlags)row_flags, min_row_height )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TableNextColumn()
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableNextColumn )
CALL_FUNCTION( TableNextColumn, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TableSetColumnIndex(int column_n)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableSetColumnIndex )
INT_ARG( column_n )
CALL_FUNCTION( TableSetColumnIndex, bool, column_n )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImGuiID user_id = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableSetupColumn )
LABEL_ARG( label )
OPTIONAL_INT_ARG( flags, 0 )
OPTIONAL_FLOAT_ARG( init_width_or_weight, 0 )
OPTIONAL_UINT_ARG( user_id, 0 )
CALL_FUNCTION_NO_RET( TableSetupColumn, label, (ImGuiTableColumnFlags)flags, init_width_or_weight, (ImGuiID)user_id )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableSetupScrollFreeze(int cols, int rows)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableSetupScrollFreeze )
INT_ARG( cols )
INT_ARG( rows )
CALL_FUNCTION_NO_RET( TableSetupScrollFreeze, cols, rows )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableHeadersRow()
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableHeadersRow )
CALL_FUNCTION_NO_RET( TableHeadersRow )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableHeader(const char* label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableHeader )
LABEL_ARG( label )
CALL_FUNCTION_NO_RET( TableHeader, label )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiTableSortSpecs* TableGetSortSpecs()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// int TableGetColumnCount()
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableGetColumnCount )
CALL_FUNCTION( TableGetColumnCount, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int TableGetColumnIndex()
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableGetColumnIndex )
CALL_FUNCTION( TableGetColumnIndex, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int TableGetRowIndex()
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableGetRowIndex )
CALL_FUNCTION( TableGetRowIndex, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// const char* TableGetColumnName(int column_n = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableGetColumnName )
OPTIONAL_INT_ARG( column_n, -1 )
CALL_FUNCTION( TableGetColumnName, const char*, column_n )
PUSH_STRING( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableGetColumnFlags )
OPTIONAL_INT_ARG( column_n, -1 )
CALL_FUNCTION( TableGetColumnFlags, int, column_n )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableSetColumnEnabled(int column_n, bool v)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableSetColumnEnabled )
INT_ARG( column_n )
BOOL_ARG( v )
CALL_FUNCTION_NO_RET( TableSetColumnEnabled, column_n, v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TableSetBgColor )
INT_ARG( target )
UINT_ARG( color )
OPTIONAL_INT_ARG( column_n, -1 )
CALL_FUNCTION_NO_RET( TableSetBgColor, (ImGuiTableBgTarget)target, (ImU32)color, column_n )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void Columns(int count = 1, const char* id = , bool border = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( Columns )
OPTIONAL_INT_ARG( count, 1 )
OPTIONAL_LABEL_ARG( id, "" )
OPTIONAL_BOOL_ARG( border, true )
CALL_FUNCTION_NO_RET( Columns, count, id, border )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void NextColumn()
//----------------------------------------------------------------//
IMGUI_FUNCTION( NextColumn )
CALL_FUNCTION_NO_RET( NextColumn )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int GetColumnIndex()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetColumnIndex )
CALL_FUNCTION( GetColumnIndex, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetColumnWidth(int column_index = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetColumnWidth )
OPTIONAL_INT_ARG( column_index, -1 )
CALL_FUNCTION( GetColumnWidth, float, column_index )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetColumnWidth(int column_index, float width)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetColumnWidth )
INT_ARG( column_index )
FLOAT_ARG( width )
CALL_FUNCTION_NO_RET( SetColumnWidth, column_index, width )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// float GetColumnOffset(int column_index = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetColumnOffset )
OPTIONAL_INT_ARG( column_index, -1 )
CALL_FUNCTION( GetColumnOffset, float, column_index )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetColumnOffset(int column_index, float offset_x)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetColumnOffset )
INT_ARG( column_index )
FLOAT_ARG( offset_x )
CALL_FUNCTION_NO_RET( SetColumnOffset, column_index, offset_x )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int GetColumnsCount()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetColumnsCount )
CALL_FUNCTION( GetColumnsCount, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginTabBar )
LABEL_ARG( str_id )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginTabBar, bool, str_id, (ImGuiTabBarFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndTabBar()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndTabBar )
CALL_FUNCTION_NO_RET( EndTabBar )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginTabItem(const char* label, bool* p_open = , ImGuiTabItemFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginTabItem )
LABEL_ARG( label )
BOOL_POINTER_ARG( p_open )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginTabItem, bool, label, p_open, (ImGuiTabItemFlags)flags )
PUSH_BOOL( ret )
END_BOOL_POINTER( p_open )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndTabItem()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndTabItem )
CALL_FUNCTION_NO_RET( EndTabItem )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool TabItemButton(const char* label, ImGuiTabItemFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( TabItemButton )
LABEL_ARG( label )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( TabItemButton, bool, label, (ImGuiTabItemFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetTabItemClosed(const char* tab_or_docked_window_label)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetTabItemClosed )
LABEL_ARG( tab_or_docked_window_label )
CALL_FUNCTION_NO_RET( SetTabItemClosed, tab_or_docked_window_label )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiID DockSpace(ImGuiID id, const ImVec2& size = ImVec2(0,0), ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiID DockSpaceOverViewport(const ImGuiViewport* viewport = , ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextWindowDockID )
UINT_ARG( dock_id )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION_NO_RET( SetNextWindowDockID, (ImGuiID)dock_id, (ImGuiCond)cond )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void SetNextWindowClass(const ImGuiWindowClass* window_class)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiID GetWindowDockID()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool IsWindowDocked()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsWindowDocked )
CALL_FUNCTION( IsWindowDocked, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LogToTTY(int auto_open_depth = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( LogToTTY )
OPTIONAL_INT_ARG( auto_open_depth, -1 )
CALL_FUNCTION_NO_RET( LogToTTY, auto_open_depth )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LogToFile(int auto_open_depth = -1, const char* filename = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( LogToFile )
OPTIONAL_INT_ARG( auto_open_depth, -1 )
OPTIONAL_LABEL_ARG( filename, "" )
CALL_FUNCTION_NO_RET( LogToFile, auto_open_depth, filename )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LogToClipboard(int auto_open_depth = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( LogToClipboard )
OPTIONAL_INT_ARG( auto_open_depth, -1 )
CALL_FUNCTION_NO_RET( LogToClipboard, auto_open_depth )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LogFinish()
//----------------------------------------------------------------//
IMGUI_FUNCTION( LogFinish )
CALL_FUNCTION_NO_RET( LogFinish )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LogButtons()
//----------------------------------------------------------------//
IMGUI_FUNCTION( LogButtons )
CALL_FUNCTION_NO_RET( LogButtons )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LogText(const char* fmt, ...)
//----------------------------------------------------------------//
IMGUI_FUNCTION( LogText )
LABEL_ARG( fmt )
CALL_FUNCTION_NO_RET( LogText, fmt )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void LogTextV(const char* fmt, va_list args)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool BeginDragDropSource(ImGuiDragDropFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginDragDropSource )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginDragDropSource, bool, (ImGuiDragDropFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetDragDropPayload )
LABEL_ARG( type )
VOID_ARG( data )
UINT_ARG( sz )
OPTIONAL_INT_ARG( cond, 0 )
CALL_FUNCTION( SetDragDropPayload, bool, type, data, (size_t)sz, (ImGuiCond)cond )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndDragDropSource()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndDragDropSource )
CALL_FUNCTION_NO_RET( EndDragDropSource )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool BeginDragDropTarget()
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginDragDropTarget )
CALL_FUNCTION( BeginDragDropTarget, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void EndDragDropTarget()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndDragDropTarget )
CALL_FUNCTION_NO_RET( EndDragDropTarget )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: const ImGuiPayload* GetDragDropPayload()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void BeginDisabled(bool disabled = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginDisabled )
OPTIONAL_BOOL_ARG( disabled, true )
CALL_FUNCTION_NO_RET( BeginDisabled, disabled )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndDisabled()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndDisabled )
CALL_FUNCTION_NO_RET( EndDisabled )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
//----------------------------------------------------------------//
IMGUI_FUNCTION( PushClipRect )
IM_VEC_2_ARG( clip_rect_min )
IM_VEC_2_ARG( clip_rect_max )
BOOL_ARG( intersect_with_current_clip_rect )
CALL_FUNCTION_NO_RET( PushClipRect, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void PopClipRect()
//----------------------------------------------------------------//
IMGUI_FUNCTION( PopClipRect )
CALL_FUNCTION_NO_RET( PopClipRect )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetItemDefaultFocus()
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetItemDefaultFocus )
CALL_FUNCTION_NO_RET( SetItemDefaultFocus )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetKeyboardFocusHere(int offset = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetKeyboardFocusHere )
OPTIONAL_INT_ARG( offset, 0 )
CALL_FUNCTION_NO_RET( SetKeyboardFocusHere, offset )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemHovered(ImGuiHoveredFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemHovered )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( IsItemHovered, bool, (ImGuiHoveredFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemActive()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemActive )
CALL_FUNCTION( IsItemActive, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemFocused()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemFocused )
CALL_FUNCTION( IsItemFocused, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemClicked(ImGuiMouseButton mouse_button = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemClicked )
OPTIONAL_INT_ARG( mouse_button, 0 )
CALL_FUNCTION( IsItemClicked, bool, (ImGuiMouseButton)mouse_button )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemVisible()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemVisible )
CALL_FUNCTION( IsItemVisible, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemEdited()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemEdited )
CALL_FUNCTION( IsItemEdited, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemActivated()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemActivated )
CALL_FUNCTION( IsItemActivated, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemDeactivated()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemDeactivated )
CALL_FUNCTION( IsItemDeactivated, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemDeactivatedAfterEdit()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemDeactivatedAfterEdit )
CALL_FUNCTION( IsItemDeactivatedAfterEdit, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsItemToggledOpen()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsItemToggledOpen )
CALL_FUNCTION( IsItemToggledOpen, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsAnyItemHovered()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsAnyItemHovered )
CALL_FUNCTION( IsAnyItemHovered, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsAnyItemActive()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsAnyItemActive )
CALL_FUNCTION( IsAnyItemActive, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsAnyItemFocused()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsAnyItemFocused )
CALL_FUNCTION( IsAnyItemFocused, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiID GetItemID()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// ImVec2 GetItemRectMin()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetItemRectMin )
CALL_FUNCTION( GetItemRectMin, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetItemRectMax()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetItemRectMax )
CALL_FUNCTION( GetItemRectMax, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetItemRectSize()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetItemRectSize )
CALL_FUNCTION( GetItemRectSize, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetItemAllowOverlap()
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetItemAllowOverlap )
CALL_FUNCTION_NO_RET( SetItemAllowOverlap )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiViewport* GetMainViewport()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImDrawList* GetBackgroundDrawList()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImDrawList* GetForegroundDrawList()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImDrawList* GetBackgroundDrawList(ImGuiViewport* viewport)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImDrawList* GetForegroundDrawList(ImGuiViewport* viewport)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool IsRectVisible(const ImVec2& size)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsRectVisible )
IM_VEC_2_ARG( size )
CALL_FUNCTION( IsRectVisible, bool, size )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsRectVisible_2 )
IM_VEC_2_ARG( rect_min )
IM_VEC_2_ARG( rect_max )
CALL_FUNCTION( IsRectVisible, bool, rect_min, rect_max )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// double GetTime()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetTime )
CALL_FUNCTION( GetTime, double )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int GetFrameCount()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetFrameCount )
CALL_FUNCTION( GetFrameCount, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImDrawListSharedData* GetDrawListSharedData()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// const char* GetStyleColorName(ImGuiCol idx)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetStyleColorName )
INT_ARG( idx )
CALL_FUNCTION( GetStyleColorName, const char*, (ImGuiCol)idx )
PUSH_STRING( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void SetStateStorage(ImGuiStorage* storage)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiStorage* GetStateStorage()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// bool BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( BeginChildFrame )
UINT_ARG( id )
IM_VEC_2_ARG( size )
OPTIONAL_INT_ARG( flags, 0 )
CALL_FUNCTION( BeginChildFrame, bool, (ImGuiID)id, size, (ImGuiWindowFlags)flags )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void EndChildFrame()
//----------------------------------------------------------------//
IMGUI_FUNCTION( EndChildFrame )
CALL_FUNCTION_NO_RET( EndChildFrame )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 CalcTextSize(const char* text, const char* text_end = , bool hide_text_after_double_hash = false, float wrap_width = -1.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( CalcTextSize )
LABEL_ARG( text )
OPTIONAL_LABEL_ARG( text_end, "" )
OPTIONAL_BOOL_ARG( hide_text_after_double_hash, false )
OPTIONAL_FLOAT_ARG( wrap_width, -1 )
CALL_FUNCTION( CalcTextSize, ImVec2, text, text_end, hide_text_after_double_hash, wrap_width )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec4 ColorConvertU32ToFloat4(ImU32 in)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorConvertU32ToFloat4 )
UINT_ARG( in )
CALL_FUNCTION( ColorConvertU32ToFloat4, ImVec4, (ImU32)in )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
PUSH_TABLE_NUMBER( ret.z )
SET_TABLE_FIELD( "z" )
PUSH_TABLE_NUMBER( ret.w )
SET_TABLE_FIELD( "w" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImU32 ColorConvertFloat4ToU32(const ImVec4& in)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorConvertRGBtoHSV )
FLOAT_ARG( r )
FLOAT_ARG( g )
FLOAT_ARG( b )
FLOAT_ARG( out_h )
FLOAT_ARG( out_s )
FLOAT_ARG( out_v )
CALL_FUNCTION_NO_RET( ColorConvertRGBtoHSV, r, g, b, out_h, out_s, out_v )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ColorConvertHSVtoRGB )
FLOAT_ARG( h )
FLOAT_ARG( s )
FLOAT_ARG( v )
FLOAT_ARG( out_r )
FLOAT_ARG( out_g )
FLOAT_ARG( out_b )
CALL_FUNCTION_NO_RET( ColorConvertHSVtoRGB, h, s, v, out_r, out_g, out_b )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsKeyDown(ImGuiKey key)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsKeyDown )
INT_ARG( key )
CALL_FUNCTION( IsKeyDown, bool, (ImGuiKey)key )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsKeyPressed(ImGuiKey key, bool repeat = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsKeyPressed )
INT_ARG( key )
OPTIONAL_BOOL_ARG( repeat, true )
CALL_FUNCTION( IsKeyPressed, bool, (ImGuiKey)key, repeat )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsKeyReleased(ImGuiKey key)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsKeyReleased )
INT_ARG( key )
CALL_FUNCTION( IsKeyReleased, bool, (ImGuiKey)key )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetKeyPressedAmount )
INT_ARG( key )
FLOAT_ARG( repeat_delay )
FLOAT_ARG( rate )
CALL_FUNCTION( GetKeyPressedAmount, int, (ImGuiKey)key, repeat_delay, rate )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// const char* GetKeyName(ImGuiKey key)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetKeyName )
INT_ARG( key )
CALL_FUNCTION( GetKeyName, const char*, (ImGuiKey)key )
PUSH_STRING( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextFrameWantCaptureKeyboard )
BOOL_ARG( want_capture_keyboard )
CALL_FUNCTION_NO_RET( SetNextFrameWantCaptureKeyboard, want_capture_keyboard )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMouseDown(ImGuiMouseButton button)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMouseDown )
INT_ARG( button )
CALL_FUNCTION( IsMouseDown, bool, (ImGuiMouseButton)button )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMouseClicked(ImGuiMouseButton button, bool repeat = false)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMouseClicked )
INT_ARG( button )
OPTIONAL_BOOL_ARG( repeat, false )
CALL_FUNCTION( IsMouseClicked, bool, (ImGuiMouseButton)button, repeat )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMouseReleased(ImGuiMouseButton button)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMouseReleased )
INT_ARG( button )
CALL_FUNCTION( IsMouseReleased, bool, (ImGuiMouseButton)button )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMouseDoubleClicked(ImGuiMouseButton button)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMouseDoubleClicked )
INT_ARG( button )
CALL_FUNCTION( IsMouseDoubleClicked, bool, (ImGuiMouseButton)button )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// int GetMouseClickedCount(ImGuiMouseButton button)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetMouseClickedCount )
INT_ARG( button )
CALL_FUNCTION( GetMouseClickedCount, int, (ImGuiMouseButton)button )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMouseHoveringRect )
IM_VEC_2_ARG( r_min )
IM_VEC_2_ARG( r_max )
OPTIONAL_BOOL_ARG( clip, true )
CALL_FUNCTION( IsMouseHoveringRect, bool, r_min, r_max, clip )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMousePosValid(const ImVec2* mouse_pos = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMousePosValid )
IM_VEC_2_POINTER_ARG( mouse_pos )
CALL_FUNCTION( IsMousePosValid, bool, mouse_pos )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsAnyMouseDown()
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsAnyMouseDown )
CALL_FUNCTION( IsAnyMouseDown, bool )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetMousePos()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetMousePos )
CALL_FUNCTION( GetMousePos, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetMousePosOnOpeningCurrentPopup()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetMousePosOnOpeningCurrentPopup )
CALL_FUNCTION( GetMousePosOnOpeningCurrentPopup, ImVec2 )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( IsMouseDragging )
INT_ARG( button )
OPTIONAL_FLOAT_ARG( lock_threshold, -1 )
CALL_FUNCTION( IsMouseDragging, bool, (ImGuiMouseButton)button, lock_threshold )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImVec2 GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetMouseDragDelta )
OPTIONAL_INT_ARG( button, 0 )
OPTIONAL_FLOAT_ARG( lock_threshold, -1 )
CALL_FUNCTION( GetMouseDragDelta, ImVec2, (ImGuiMouseButton)button, lock_threshold )
PUSH_TABLE
PUSH_TABLE_NUMBER( ret.x )
SET_TABLE_FIELD( "x" )
PUSH_TABLE_NUMBER( ret.y )
SET_TABLE_FIELD( "y" )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void ResetMouseDragDelta(ImGuiMouseButton button = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ResetMouseDragDelta )
OPTIONAL_INT_ARG( button, 0 )
CALL_FUNCTION_NO_RET( ResetMouseDragDelta, (ImGuiMouseButton)button )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// ImGuiMouseCursor GetMouseCursor()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetMouseCursor )
CALL_FUNCTION( GetMouseCursor, int )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetMouseCursor(ImGuiMouseCursor cursor_type)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetMouseCursor )
INT_ARG( cursor_type )
CALL_FUNCTION_NO_RET( SetMouseCursor, (ImGuiMouseCursor)cursor_type )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetNextFrameWantCaptureMouse(bool want_capture_mouse)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetNextFrameWantCaptureMouse )
BOOL_ARG( want_capture_mouse )
CALL_FUNCTION_NO_RET( SetNextFrameWantCaptureMouse, want_capture_mouse )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// const char* GetClipboardText()
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetClipboardText )
CALL_FUNCTION( GetClipboardText, const char* )
PUSH_STRING( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetClipboardText(const char* text)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetClipboardText )
LABEL_ARG( text )
CALL_FUNCTION_NO_RET( SetClipboardText, text )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LoadIniSettingsFromDisk(const char* ini_filename)
//----------------------------------------------------------------//
IMGUI_FUNCTION( LoadIniSettingsFromDisk )
LABEL_ARG( ini_filename )
CALL_FUNCTION_NO_RET( LoadIniSettingsFromDisk, ini_filename )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size = 0)
//----------------------------------------------------------------//
IMGUI_FUNCTION( LoadIniSettingsFromMemory )
LABEL_ARG( ini_data )
OPTIONAL_UINT_ARG( ini_size, 0 )
CALL_FUNCTION_NO_RET( LoadIniSettingsFromMemory, ini_data, (size_t)ini_size )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SaveIniSettingsToDisk(const char* ini_filename)
//----------------------------------------------------------------//
IMGUI_FUNCTION( SaveIniSettingsToDisk )
LABEL_ARG( ini_filename )
CALL_FUNCTION_NO_RET( SaveIniSettingsToDisk, ini_filename )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: const char* SaveIniSettingsToMemory(size_t* out_ini_size = )
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void DebugTextEncoding(const char* text)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DebugTextEncoding )
LABEL_ARG( text )
CALL_FUNCTION_NO_RET( DebugTextEncoding, text )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
//----------------------------------------------------------------//
IMGUI_FUNCTION( DebugCheckVersionAndDataLayout )
LABEL_ARG( version_str )
UINT_ARG( sz_io )
UINT_ARG( sz_style )
UINT_ARG( sz_vec2 )
UINT_ARG( sz_vec4 )
UINT_ARG( sz_drawvert )
UINT_ARG( sz_drawidx )
CALL_FUNCTION( DebugCheckVersionAndDataLayout, bool, version_str, (size_t)sz_io, (size_t)sz_style, (size_t)sz_vec2, (size_t)sz_vec4, (size_t)sz_drawvert, (size_t)sz_drawidx )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( SetAllocatorFunctions )
CALLBACK_STUB( alloc_func, ImGuiMemAllocFunc )
CALLBACK_STUB( free_func, ImGuiMemFreeFunc )
OPTIONAL_VOID_ARG( user_data, 0 )
CALL_FUNCTION_NO_RET( SetAllocatorFunctions, (ImGuiMemAllocFunc)alloc_func, (ImGuiMemFreeFunc)free_func, user_data )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: void GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: void* MemAlloc(size_t size)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void MemFree(void* ptr)
//----------------------------------------------------------------//
IMGUI_FUNCTION( MemFree )
VOID_ARG( ptr )
CALL_FUNCTION_NO_RET( MemFree, ptr )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiPlatformIO& GetPlatformIO()
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// void UpdatePlatformWindows()
//----------------------------------------------------------------//
IMGUI_FUNCTION( UpdatePlatformWindows )
CALL_FUNCTION_NO_RET( UpdatePlatformWindows )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void RenderPlatformWindowsDefault(void* platform_render_arg = , void* renderer_render_arg = )
//----------------------------------------------------------------//
IMGUI_FUNCTION( RenderPlatformWindowsDefault )
OPTIONAL_VOID_ARG( platform_render_arg, 0 )
OPTIONAL_VOID_ARG( renderer_render_arg, 0 )
CALL_FUNCTION_NO_RET( RenderPlatformWindowsDefault, platform_render_arg, renderer_render_arg )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void DestroyPlatformWindows()
//----------------------------------------------------------------//
IMGUI_FUNCTION( DestroyPlatformWindows )
CALL_FUNCTION_NO_RET( DestroyPlatformWindows )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// unsupported: ImGuiViewport* FindViewportByID(ImGuiID id)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// unsupported: ImGuiViewport* FindViewportByPlatformHandle(void* platform_handle)
//----------------------------------------------------------------//

//----------------------------------------------------------------//
// ImGuiKey GetKeyIndex(ImGuiKey key)
//----------------------------------------------------------------//
IMGUI_FUNCTION( GetKeyIndex )
INT_ARG( key )
CALL_FUNCTION( GetKeyIndex, unsigned int, (ImGuiKey)key )
PUSH_NUMBER( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1))
//----------------------------------------------------------------//
IMGUI_FUNCTION( ImageButton_2 )
IM_TEXTURE_ID_ARG( user_texture_id )
IM_VEC_2_ARG( size )
OPTIONAL_IM_VEC_2_ARG( uv0, 0, 0 )
OPTIONAL_IM_VEC_2_ARG( uv1, 1, 1 )
OPTIONAL_INT_ARG( frame_padding, -1 )
OPTIONAL_IM_VEC_4_ARG( bg_col, 0, 0, 0, 0 )
OPTIONAL_IM_VEC_4_ARG( tint_col, 1, 1, 1, 1 )
CALL_FUNCTION( ImageButton, bool, (ImTextureID)user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col )
PUSH_BOOL( ret )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// void CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)
//----------------------------------------------------------------//
IMGUI_FUNCTION( CalcListClipping )
INT_ARG( items_count )
FLOAT_ARG( items_height )
INT_POINTER_ARG( out_items_display_start )
INT_POINTER_ARG( out_items_display_end )
CALL_FUNCTION_NO_RET( CalcListClipping, items_count, items_height, out_items_display_start, out_items_display_end )
END_INT_POINTER( out_items_display_start )
END_INT_POINTER( out_items_display_end )
END_IMGUI_FUNC

//----------------------------------------------------------------//
// bool ListBoxHeader(const char* label, int items_count, int height_in_items = -1)
//----------------------------------------------------------------//
IMGUI_FUNCTION( ListBoxHeader )
LABEL_ARG( label )
INT_ARG( items_count )
OPTIONAL_INT_ARG( height_in_items, -1 )
CALL_FUNCTION( ListBoxHeader, bool, label, items_count, height_in_items )
PUSH_BOOL( ret )
END_IMGUI_FUNC

